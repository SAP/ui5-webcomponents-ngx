// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test Fiori Bar should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/Bar.js';
import type Bar from '@ui5/webcomponents-fiori/dist/Bar.js';

export declare interface BarElement extends Partial<Omit<Bar, 'design'>> {
  design: 'FloatingFooter' | 'Footer' | 'Header' | 'Subheader';
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'design'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-bar',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Bar',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'design',
  ],
  outputs: [],
  providers: [],
})
export class BarComponent {
  design?: BarElement['design'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BarElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BarElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BarComponent extends Partial<BarElement> {}
"
`;

exports[`Snapshot test Fiori Barcode Scanner Dialog should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/BarcodeScannerDialog.js';
import type BarcodeScannerDialog from '@ui5/webcomponents-fiori/dist/BarcodeScannerDialog.js';

interface BarcodeScannerDialogComponentEventsMap
  extends Omit<HTMLElementEventMap, 'scanError' | 'scanSuccess'> {
  scanError: CustomEvent<{ message: string }>;
  scanSuccess: CustomEvent<{ text: string; rawBytes: Record<string, any> }>;
}

export declare interface BarcodeScannerDialogElement
  extends Partial<Omit<BarcodeScannerDialog, 'scanError' | 'scanSuccess'>> {
  addEventListener<K extends keyof BarcodeScannerDialogComponentEventsMap>(
    type: K,
    listener: (
      this: BarcodeScannerDialogElement,
      ev: BarcodeScannerDialogComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof BarcodeScannerDialogComponentEventsMap>(
    type: K,
    listener: (
      this: BarcodeScannerDialogElement,
      ev: BarcodeScannerDialogComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs(['scanError', 'scanSuccess'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'close',
  'show',
])
@Component({
  selector: 'ui5-barcode-scanner-dialog',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5BarcodeScannerDialog',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: ['scanError: ui5ScanError', 'scanSuccess: ui5ScanSuccess'],
  providers: [],
})
export class BarcodeScannerDialogComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BarcodeScannerDialogElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BarcodeScannerDialogElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BarcodeScannerDialogComponent
  extends Partial<BarcodeScannerDialogElement> {
  scanError: EventEmitter<BarcodeScannerDialogComponentEventsMap['scanError']>;
  scanSuccess: EventEmitter<
    BarcodeScannerDialogComponentEventsMap['scanSuccess']
  >;
}
"
`;

exports[`Snapshot test Fiori Dynamic Side Content should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/DynamicSideContent.js';
import type DynamicSideContent from '@ui5/webcomponents-fiori/dist/DynamicSideContent.js';

interface DynamicSideContentComponentEventsMap
  extends Omit<HTMLElementEventMap, 'layoutChange'> {
  layoutChange: CustomEvent<{
    currentBreakpoint: string;
    previousBreakpoint: string;
    mainContentVisible: boolean;
    sideContentVisible: boolean;
  }>;
}

export declare interface DynamicSideContentElement
  extends Partial<
    Omit<
      DynamicSideContent,
      | 'layoutChange'
      | 'equalSplit'
      | 'hideMainContent'
      | 'hideSideContent'
      | 'sideContentFallDown'
      | 'sideContentPosition'
      | 'sideContentVisibility'
    >
  > {
  equalSplit: boolean;
  hideMainContent: boolean;
  hideSideContent: boolean;
  sideContentFallDown: 'BelowL' | 'BelowM' | 'BelowXL' | 'OnMinimumWidth';
  sideContentPosition: 'End' | 'Start';
  sideContentVisibility:
    | 'AlwaysShow'
    | 'NeverShow'
    | 'ShowAboveL'
    | 'ShowAboveM'
    | 'ShowAboveS';
  addEventListener<K extends keyof DynamicSideContentComponentEventsMap>(
    type: K,
    listener: (
      this: DynamicSideContentElement,
      ev: DynamicSideContentComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DynamicSideContentComponentEventsMap>(
    type: K,
    listener: (
      this: DynamicSideContentElement,
      ev: DynamicSideContentComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'equalSplit',
  'hideMainContent',
  'hideSideContent',
  'sideContentFallDown',
  'sideContentPosition',
  'sideContentVisibility',
])
@ProxyOutputs(['layoutChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'toggleContents',
])
@Component({
  selector: 'ui5-dynamic-side-content',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5DynamicSideContent',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'equalSplit: equal-split',
    'hideMainContent: hide-main-content',
    'hideSideContent: hide-side-content',
    'sideContentFallDown: side-content-fall-down',
    'sideContentPosition: side-content-position',
    'sideContentVisibility: side-content-visibility',
  ],
  outputs: ['layoutChange: ui5LayoutChange'],
  providers: [],
})
export class DynamicSideContentComponent {
  equalSplit?: DynamicSideContentElement['equalSplit'];
  hideMainContent?: DynamicSideContentElement['hideMainContent'];
  hideSideContent?: DynamicSideContentElement['hideSideContent'];
  sideContentFallDown?: DynamicSideContentElement['sideContentFallDown'];
  sideContentPosition?: DynamicSideContentElement['sideContentPosition'];
  sideContentVisibility?: DynamicSideContentElement['sideContentVisibility'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DynamicSideContentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): DynamicSideContentElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DynamicSideContentComponent
  extends Partial<DynamicSideContentElement> {
  layoutChange: EventEmitter<
    DynamicSideContentComponentEventsMap['layoutChange']
  >;
}
"
`;

exports[`Snapshot test Fiori Filter Item Option should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/FilterItemOption.js';
import type FilterItemOption from '@ui5/webcomponents-fiori/dist/FilterItemOption.js';

export declare interface FilterItemOptionElement
  extends Partial<Omit<FilterItemOption, 'selected' | 'text'>> {
  selected: boolean;
  text: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'selected', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-filter-item-option',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5FilterItemOption',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class FilterItemOptionComponent {
  selected?: FilterItemOptionElement['selected'];
  text?: FilterItemOptionElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<FilterItemOptionElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): FilterItemOptionElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface FilterItemOptionComponent
  extends Partial<FilterItemOptionElement> {}
"
`;

exports[`Snapshot test Fiori Filter Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/FilterItem.js';
import type FilterItem from '@ui5/webcomponents-fiori/dist/FilterItem.js';

export declare interface FilterItemElement
  extends Partial<Omit<FilterItem, 'additionalText' | 'text'>> {
  additionalText: string;
  text: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'additionalText', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-filter-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5FilterItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class FilterItemComponent {
  additionalText?: FilterItemElement['additionalText'];
  text?: FilterItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<FilterItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): FilterItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface FilterItemComponent
  extends Partial<FilterItemElement> {}
"
`;

exports[`Snapshot test Fiori Flexible Column Layout should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/FlexibleColumnLayout.js';
import type FlexibleColumnLayout from '@ui5/webcomponents-fiori/dist/FlexibleColumnLayout.js';

interface FlexibleColumnLayoutComponentEventsMap
  extends Omit<HTMLElementEventMap, 'layoutChange'> {
  layoutChange: CustomEvent<{
    layout:
      | 'EndColumnFullScreen'
      | 'MidColumnFullScreen'
      | 'OneColumn'
      | 'ThreeColumnsEndExpanded'
      | 'ThreeColumnsMidExpanded'
      | 'ThreeColumnsMidExpandedEndHidden'
      | 'ThreeColumnsStartExpandedEndHidden'
      | 'TwoColumnsMidExpanded'
      | 'TwoColumnsStartExpanded';
    columnLayout: Array<any>;
    startColumnVisible: boolean;
    midColumnVisible: boolean;
    endColumnVisible: boolean;
    arrowsUsed: boolean;
    resize: boolean;
  }>;
}

export declare interface FlexibleColumnLayoutElement
  extends Partial<
    Omit<
      FlexibleColumnLayout,
      | 'layoutChange'
      | 'endColumnVisible'
      | 'hideArrows'
      | 'layout'
      | 'midColumnVisible'
      | 'startColumnVisible'
    >
  > {
  endColumnVisible: boolean;
  hideArrows: boolean;
  layout:
    | 'EndColumnFullScreen'
    | 'MidColumnFullScreen'
    | 'OneColumn'
    | 'ThreeColumnsEndExpanded'
    | 'ThreeColumnsMidExpanded'
    | 'ThreeColumnsMidExpandedEndHidden'
    | 'ThreeColumnsStartExpandedEndHidden'
    | 'TwoColumnsMidExpanded'
    | 'TwoColumnsStartExpanded';
  midColumnVisible: boolean;
  startColumnVisible: boolean;

  addEventListener<K extends keyof FlexibleColumnLayoutComponentEventsMap>(
    type: K,
    listener: (
      this: FlexibleColumnLayoutElement,
      ev: FlexibleColumnLayoutComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof FlexibleColumnLayoutComponentEventsMap>(
    type: K,
    listener: (
      this: FlexibleColumnLayoutElement,
      ev: FlexibleColumnLayoutComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityRoles',
  'accessibilityTexts',
  'columnLayout',
  'endColumnVisible',
  'hideArrows',
  'layout',
  'midColumnVisible',
  'startColumnVisible',
  'visibleColumns',
])
@ProxyOutputs(['layoutChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-flexible-column-layout',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5FlexibleColumnLayout',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityRoles: accessibility-roles',
    'accessibilityTexts: accessibility-texts',
    'columnLayout: column-layout',
    'endColumnVisible: end-column-visible',
    'hideArrows: hide-arrows',
    'layout',
    'midColumnVisible: mid-column-visible',
    'startColumnVisible: start-column-visible',
    'visibleColumns: visible-columns',
  ],
  outputs: ['layoutChange: ui5LayoutChange'],
  providers: [],
})
export class FlexibleColumnLayoutComponent {
  endColumnVisible?: FlexibleColumnLayoutElement['endColumnVisible'];
  hideArrows?: FlexibleColumnLayoutElement['hideArrows'];
  layout?: FlexibleColumnLayoutElement['layout'];
  midColumnVisible?: FlexibleColumnLayoutElement['midColumnVisible'];
  startColumnVisible?: FlexibleColumnLayoutElement['startColumnVisible'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<FlexibleColumnLayoutElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): FlexibleColumnLayoutElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface FlexibleColumnLayoutComponent
  extends Partial<FlexibleColumnLayoutElement> {
  layoutChange: EventEmitter<
    FlexibleColumnLayoutComponentEventsMap['layoutChange']
  >;
}
"
`;

exports[`Snapshot test Fiori Illustrated Message should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/IllustratedMessage.js';
import type IllustratedMessage from '@ui5/webcomponents-fiori/dist/IllustratedMessage.js';

export declare interface IllustratedMessageElement
  extends Partial<
    Omit<
      IllustratedMessage,
      'accessibleNameRef' | 'size' | 'subtitleText' | 'titleText'
    >
  > {
  accessibleNameRef: string;

  size: 'Auto' | 'Base' | 'Dialog' | 'Scene' | 'Spot';
  subtitleText: string;
  titleText: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleNameRef',
  'name',
  'size',
  'subtitleText',
  'titleText',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-illustrated-message',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5IllustratedMessage',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleNameRef: accessible-name-ref',
    'name',
    'size',
    'subtitleText: subtitle-text',
    'titleText: title-text',
  ],
  outputs: [],
  providers: [],
})
export class IllustratedMessageComponent {
  accessibleNameRef?: IllustratedMessageElement['accessibleNameRef'];
  size?: IllustratedMessageElement['size'];
  subtitleText?: IllustratedMessageElement['subtitleText'];
  titleText?: IllustratedMessageElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<IllustratedMessageElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): IllustratedMessageElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface IllustratedMessageComponent
  extends Partial<IllustratedMessageElement> {}
"
`;

exports[`Snapshot test Fiori Index Ts should match the snapshot 1`] = `
"export { Ui5FioriModule } from './ui5-fiori.module';
"
`;

exports[`Snapshot test Fiori Media Gallery Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/MediaGalleryItem.js';
import type MediaGalleryItem from '@ui5/webcomponents-fiori/dist/MediaGalleryItem.js';

export declare interface MediaGalleryItemElement
  extends Partial<Omit<MediaGalleryItem, 'disabled' | 'layout' | 'selected'>> {
  disabled: boolean;
  layout: 'Square' | 'Wide';
  selected: boolean;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'disabled', 'layout', 'selected'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-media-gallery-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5MediaGalleryItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'disabled',
    'layout',
    'selected',
  ],
  outputs: [],
  providers: [],
})
export class MediaGalleryItemComponent {
  disabled?: MediaGalleryItemElement['disabled'];
  layout?: MediaGalleryItemElement['layout'];
  selected?: MediaGalleryItemElement['selected'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MediaGalleryItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MediaGalleryItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MediaGalleryItemComponent
  extends Partial<MediaGalleryItemElement> {}
"
`;

exports[`Snapshot test Fiori Media Gallery should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/MediaGallery.js';
import type MediaGallery from '@ui5/webcomponents-fiori/dist/MediaGallery.js';

interface MediaGalleryComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'displayAreaClick' | 'overflowClick' | 'selectionChange'
  > {
  displayAreaClick: CustomEvent<void>;
  overflowClick: CustomEvent<void>;
  selectionChange: CustomEvent<{ item: HTMLElement }>;
}

export declare interface MediaGalleryElement
  extends Partial<
    Omit<
      MediaGallery,
      | 'displayAreaClick'
      | 'overflowClick'
      | 'selectionChange'
      | 'interactiveDisplayArea'
      | 'layout'
      | 'menuHorizontalAlign'
      | 'menuVerticalAlign'
      | 'showAllThumbnails'
    >
  > {
  interactiveDisplayArea: boolean;
  layout: 'Auto' | 'Horizontal' | 'Vertical';
  menuHorizontalAlign: 'Left' | 'Right';
  menuVerticalAlign: 'Bottom' | 'Top';
  showAllThumbnails: boolean;
  addEventListener<K extends keyof MediaGalleryComponentEventsMap>(
    type: K,
    listener: (
      this: MediaGalleryElement,
      ev: MediaGalleryComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MediaGalleryComponentEventsMap>(
    type: K,
    listener: (
      this: MediaGalleryElement,
      ev: MediaGalleryComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'interactiveDisplayArea',
  'layout',
  'menuHorizontalAlign',
  'menuVerticalAlign',
  'showAllThumbnails',
])
@ProxyOutputs(['displayAreaClick', 'overflowClick', 'selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-media-gallery',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5MediaGallery',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'interactiveDisplayArea: interactive-display-area',
    'layout',
    'menuHorizontalAlign: menu-horizontal-align',
    'menuVerticalAlign: menu-vertical-align',
    'showAllThumbnails: show-all-thumbnails',
  ],
  outputs: [
    'displayAreaClick: ui5DisplayAreaClick',
    'overflowClick: ui5OverflowClick',
    'selectionChange: ui5SelectionChange',
  ],
  providers: [],
})
export class MediaGalleryComponent {
  interactiveDisplayArea?: MediaGalleryElement['interactiveDisplayArea'];
  layout?: MediaGalleryElement['layout'];
  menuHorizontalAlign?: MediaGalleryElement['menuHorizontalAlign'];
  menuVerticalAlign?: MediaGalleryElement['menuVerticalAlign'];
  showAllThumbnails?: MediaGalleryElement['showAllThumbnails'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MediaGalleryElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MediaGalleryElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MediaGalleryComponent
  extends Partial<MediaGalleryElement> {
  displayAreaClick: EventEmitter<
    MediaGalleryComponentEventsMap['displayAreaClick']
  >;
  overflowClick: EventEmitter<MediaGalleryComponentEventsMap['overflowClick']>;
  selectionChange: EventEmitter<
    MediaGalleryComponentEventsMap['selectionChange']
  >;
}
"
`;

exports[`Snapshot test Fiori Ng Package Json should match the snapshot 1`] = `
"{ \\"lib\\": { \\"entryFile\\": \\"./index.ts\\" } }
"
`;

exports[`Snapshot test Fiori Notification Action should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/NotificationAction.js';
import type NotificationAction from '@ui5/webcomponents-fiori/dist/NotificationAction.js';

interface NotificationActionComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<{ targetRef: HTMLElement }>;
}

export declare interface NotificationActionElement
  extends Partial<
    Omit<NotificationAction, 'click' | 'design' | 'disabled' | 'icon' | 'text'>
  > {
  design:
    | 'Attention'
    | 'Default'
    | 'Emphasized'
    | 'Negative'
    | 'Positive'
    | 'Transparent';
  disabled: boolean;
  icon: string;
  text: string;
  addEventListener<K extends keyof NotificationActionComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationActionElement,
      ev: NotificationActionComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof NotificationActionComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationActionElement,
      ev: NotificationActionComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'design',
  'disabled',
  'icon',
  'text',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'fireClickEvent',
])
@Component({
  selector: 'ui5-notification-action',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5NotificationAction',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'design',
    'disabled',
    'icon',
    'text',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class NotificationActionComponent {
  design?: NotificationActionElement['design'];
  disabled?: NotificationActionElement['disabled'];
  icon?: NotificationActionElement['icon'];
  text?: NotificationActionElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<NotificationActionElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): NotificationActionElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface NotificationActionComponent
  extends Partial<NotificationActionElement> {
  click: EventEmitter<NotificationActionComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Fiori Notification List Group Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/NotificationListGroupItem.js';
import type NotificationListGroupItem from '@ui5/webcomponents-fiori/dist/NotificationListGroupItem.js';

interface NotificationListGroupItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'close' | 'toggle'> {
  close: CustomEvent<{ item: HTMLElement }>;
  toggle: CustomEvent<void>;
}

export declare interface NotificationListGroupItemElement
  extends Partial<
    Omit<
      NotificationListGroupItem,
      | 'close'
      | 'toggle'
      | 'selected'
      | 'busy'
      | 'priority'
      | 'read'
      | 'showClose'
      | 'titleText'
      | 'collapsed'
      | 'showCounter'
    >
  > {
  selected: boolean;
  busy: boolean;

  priority: 'High' | 'Low' | 'Medium' | 'None';
  read: boolean;
  showClose: boolean;
  titleText: string;
  collapsed: boolean;
  showCounter: boolean;
  addEventListener<K extends keyof NotificationListGroupItemComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationListGroupItemElement,
      ev: NotificationListGroupItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<
    K extends keyof NotificationListGroupItemComponentEventsMap
  >(
    type: K,
    listener: (
      this: NotificationListGroupItemElement,
      ev: NotificationListGroupItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'busy',
  'busyDelay',
  'priority',
  'read',
  'showClose',
  'titleText',
  'collapsed',
  'showCounter',
])
@ProxyOutputs(['close', 'toggle'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li-notification-group',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5NotificationListGroupItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'busy',
    'busyDelay: busy-delay',
    'priority',
    'read',
    'showClose: show-close',
    'titleText: title-text',
    'collapsed',
    'showCounter: show-counter',
  ],
  outputs: ['close: ui5Close', 'toggle: ui5Toggle'],
  providers: [],
})
export class NotificationListGroupItemComponent {
  selected?: NotificationListGroupItemElement['selected'];
  busy?: NotificationListGroupItemElement['busy'];
  priority?: NotificationListGroupItemElement['priority'];
  read?: NotificationListGroupItemElement['read'];
  showClose?: NotificationListGroupItemElement['showClose'];
  titleText?: NotificationListGroupItemElement['titleText'];
  collapsed?: NotificationListGroupItemElement['collapsed'];
  showCounter?: NotificationListGroupItemElement['showCounter'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<NotificationListGroupItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): NotificationListGroupItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface NotificationListGroupItemComponent
  extends Partial<NotificationListGroupItemElement> {
  close: EventEmitter<NotificationListGroupItemComponentEventsMap['close']>;
  toggle: EventEmitter<NotificationListGroupItemComponentEventsMap['toggle']>;
}
"
`;

exports[`Snapshot test Fiori Notification List Item Base should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/NotificationListItemBase.js';
import type NotificationListItemBase from '@ui5/webcomponents-fiori/dist/NotificationListItemBase.js';

interface NotificationListItemBaseComponentEventsMap
  extends Omit<HTMLElementEventMap, 'close'> {
  close: CustomEvent<{ item: HTMLElement }>;
}

export declare interface NotificationListItemBaseElement
  extends Partial<
    Omit<
      NotificationListItemBase,
      | 'close'
      | 'selected'
      | 'busy'
      | 'priority'
      | 'read'
      | 'showClose'
      | 'titleText'
    >
  > {
  selected: boolean;
  busy: boolean;

  priority: 'High' | 'Low' | 'Medium' | 'None';
  read: boolean;
  showClose: boolean;
  titleText: string;
  addEventListener<K extends keyof NotificationListItemBaseComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationListItemBaseElement,
      ev: NotificationListItemBaseComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<
    K extends keyof NotificationListItemBaseComponentEventsMap
  >(
    type: K,
    listener: (
      this: NotificationListItemBaseElement,
      ev: NotificationListItemBaseComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'busy',
  'busyDelay',
  'priority',
  'read',
  'showClose',
  'titleText',
])
@ProxyOutputs(['close'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li-notification-group',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5NotificationListItemBase',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'busy',
    'busyDelay: busy-delay',
    'priority',
    'read',
    'showClose: show-close',
    'titleText: title-text',
  ],
  outputs: ['close: ui5Close'],
  providers: [],
})
export class NotificationListItemBaseComponent {
  selected?: NotificationListItemBaseElement['selected'];
  busy?: NotificationListItemBaseElement['busy'];
  priority?: NotificationListItemBaseElement['priority'];
  read?: NotificationListItemBaseElement['read'];
  showClose?: NotificationListItemBaseElement['showClose'];
  titleText?: NotificationListItemBaseElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<NotificationListItemBaseElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): NotificationListItemBaseElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface NotificationListItemBaseComponent
  extends Partial<NotificationListItemBaseElement> {
  close: EventEmitter<NotificationListItemBaseComponentEventsMap['close']>;
}
"
`;

exports[`Snapshot test Fiori Notification List Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/NotificationListItem.js';
import type NotificationListItem from '@ui5/webcomponents-fiori/dist/NotificationListItem.js';

interface NotificationListItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'close'> {
  close: CustomEvent<{ item: HTMLElement }>;
}

export declare interface NotificationListItemElement
  extends Partial<
    Omit<
      NotificationListItem,
      | 'close'
      | 'selected'
      | 'busy'
      | 'priority'
      | 'read'
      | 'showClose'
      | 'titleText'
      | 'wrappingType'
    >
  > {
  selected: boolean;
  busy: boolean;

  priority: 'High' | 'Low' | 'Medium' | 'None';
  read: boolean;
  showClose: boolean;
  titleText: string;
  wrappingType: 'None' | 'Normal';
  addEventListener<K extends keyof NotificationListItemComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationListItemElement,
      ev: NotificationListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof NotificationListItemComponentEventsMap>(
    type: K,
    listener: (
      this: NotificationListItemElement,
      ev: NotificationListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'busy',
  'busyDelay',
  'priority',
  'read',
  'showClose',
  'titleText',
  'wrappingType',
])
@ProxyOutputs(['close'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li-notification',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5NotificationListItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'busy',
    'busyDelay: busy-delay',
    'priority',
    'read',
    'showClose: show-close',
    'titleText: title-text',
    'wrappingType: wrapping-type',
  ],
  outputs: ['close: ui5Close'],
  providers: [],
})
export class NotificationListItemComponent {
  selected?: NotificationListItemElement['selected'];
  busy?: NotificationListItemElement['busy'];
  priority?: NotificationListItemElement['priority'];
  read?: NotificationListItemElement['read'];
  showClose?: NotificationListItemElement['showClose'];
  titleText?: NotificationListItemElement['titleText'];
  wrappingType?: NotificationListItemElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<NotificationListItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): NotificationListItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface NotificationListItemComponent
  extends Partial<NotificationListItemElement> {
  close: EventEmitter<NotificationListItemComponentEventsMap['close']>;
}
"
`;

exports[`Snapshot test Fiori Page should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/Page.js';
import type Page from '@ui5/webcomponents-fiori/dist/Page.js';

export declare interface PageElement
  extends Partial<
    Omit<
      Page,
      'backgroundDesign' | 'disableScrolling' | 'floatingFooter' | 'hideFooter'
    >
  > {
  backgroundDesign: 'List' | 'Solid' | 'Transparent';
  disableScrolling: boolean;
  floatingFooter: boolean;
  hideFooter: boolean;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'backgroundDesign',
  'disableScrolling',
  'floatingFooter',
  'hideFooter',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-page',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Page',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'backgroundDesign: background-design',
    'disableScrolling: disable-scrolling',
    'floatingFooter: floating-footer',
    'hideFooter: hide-footer',
  ],
  outputs: [],
  providers: [],
})
export class PageComponent {
  backgroundDesign?: PageElement['backgroundDesign'];
  disableScrolling?: PageElement['disableScrolling'];
  floatingFooter?: PageElement['floatingFooter'];
  hideFooter?: PageElement['hideFooter'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<PageElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): PageElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface PageComponent extends Partial<PageElement> {}
"
`;

exports[`Snapshot test Fiori Product Switch Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/ProductSwitchItem.js';
import type ProductSwitchItem from '@ui5/webcomponents-fiori/dist/ProductSwitchItem.js';

interface ProductSwitchItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

export declare interface ProductSwitchItemElement
  extends Partial<
    Omit<
      ProductSwitchItem,
      'click' | 'icon' | 'subtitleText' | 'target' | 'targetSrc' | 'titleText'
    >
  > {
  icon: string;
  subtitleText: string;
  target: string;
  targetSrc: string;
  titleText: string;
  addEventListener<K extends keyof ProductSwitchItemComponentEventsMap>(
    type: K,
    listener: (
      this: ProductSwitchItemElement,
      ev: ProductSwitchItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ProductSwitchItemComponentEventsMap>(
    type: K,
    listener: (
      this: ProductSwitchItemElement,
      ev: ProductSwitchItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'icon',
  'subtitleText',
  'target',
  'targetSrc',
  'titleText',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-product-switch-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ProductSwitchItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'icon',
    'subtitleText: subtitle-text',
    'target',
    'targetSrc: target-src',
    'titleText: title-text',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class ProductSwitchItemComponent {
  icon?: ProductSwitchItemElement['icon'];
  subtitleText?: ProductSwitchItemElement['subtitleText'];
  target?: ProductSwitchItemElement['target'];
  targetSrc?: ProductSwitchItemElement['targetSrc'];
  titleText?: ProductSwitchItemElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ProductSwitchItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ProductSwitchItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ProductSwitchItemComponent
  extends Partial<ProductSwitchItemElement> {
  click: EventEmitter<ProductSwitchItemComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Fiori Product Switch should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/ProductSwitch.js';
import type ProductSwitch from '@ui5/webcomponents-fiori/dist/ProductSwitch.js';

export declare interface ProductSwitchElement extends Partial<ProductSwitch> {}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-product-switch',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ProductSwitch',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: [],
  providers: [],
})
export class ProductSwitchComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ProductSwitchElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ProductSwitchElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ProductSwitchComponent
  extends Partial<ProductSwitchElement> {}
"
`;

exports[`Snapshot test Fiori Shell Bar Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/ShellBarItem.js';
import type ShellBarItem from '@ui5/webcomponents-fiori/dist/ShellBarItem.js';

interface ShellBarItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<{ targetRef: HTMLElement }>;
}

export declare interface ShellBarItemElement
  extends Partial<Omit<ShellBarItem, 'click' | 'count' | 'icon' | 'text'>> {
  count: string;
  icon: string;
  text: string;
  addEventListener<K extends keyof ShellBarItemComponentEventsMap>(
    type: K,
    listener: (
      this: ShellBarItemElement,
      ev: ShellBarItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ShellBarItemComponentEventsMap>(
    type: K,
    listener: (
      this: ShellBarItemElement,
      ev: ShellBarItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'count', 'icon', 'text'])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-shellbar-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ShellBarItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'count',
    'icon',
    'text',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class ShellBarItemComponent {
  count?: ShellBarItemElement['count'];
  icon?: ShellBarItemElement['icon'];
  text?: ShellBarItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ShellBarItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ShellBarItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ShellBarItemComponent
  extends Partial<ShellBarItemElement> {
  click: EventEmitter<ShellBarItemComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Fiori Shell Bar should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/ShellBar.js';
import type ShellBar from '@ui5/webcomponents-fiori/dist/ShellBar.js';

interface ShellBarComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    | 'coPilotClick'
    | 'logoClick'
    | 'menuItemClick'
    | 'notificationsClick'
    | 'productSwitchClick'
    | 'profileClick'
  > {
  coPilotClick: CustomEvent<{ targetRef: HTMLElement }>;
  logoClick: CustomEvent<{ targetRef: HTMLElement }>;
  menuItemClick: CustomEvent<{ item: HTMLElement }>;
  notificationsClick: CustomEvent<{ targetRef: HTMLElement }>;
  productSwitchClick: CustomEvent<{ targetRef: HTMLElement }>;
  profileClick: CustomEvent<{ targetRef: HTMLElement }>;
}

export declare interface ShellBarElement
  extends Partial<
    Omit<
      ShellBar,
      | 'coPilotClick'
      | 'logoClick'
      | 'menuItemClick'
      | 'notificationsClick'
      | 'productSwitchClick'
      | 'profileClick'
      | 'copilotDomRef'
      | 'logoDomRef'
      | 'notificationsCount'
      | 'notificationsDomRef'
      | 'overflowDomRef'
      | 'primaryTitle'
      | 'productSwitchDomRef'
      | 'profileDomRef'
      | 'secondaryTitle'
      | 'showCoPilot'
      | 'showNotifications'
      | 'showProductSwitch'
      | 'showSearchField'
    >
  > {
  copilotDomRef: HTMLElement;
  logoDomRef: HTMLElement;
  notificationsCount: string;
  notificationsDomRef: HTMLElement;
  overflowDomRef: HTMLElement;
  primaryTitle: string;
  productSwitchDomRef: HTMLElement;
  profileDomRef: HTMLElement;
  secondaryTitle: string;
  showCoPilot: boolean;
  showNotifications: boolean;
  showProductSwitch: boolean;
  showSearchField: boolean;
  addEventListener<K extends keyof ShellBarComponentEventsMap>(
    type: K,
    listener: (this: ShellBarElement, ev: ShellBarComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ShellBarComponentEventsMap>(
    type: K,
    listener: (this: ShellBarElement, ev: ShellBarComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityAttributes',
  'accessibilityRoles',
  'accessibilityTexts',
  'copilotDomRef',
  'logoDomRef',
  'notificationsCount',
  'notificationsDomRef',
  'overflowDomRef',
  'primaryTitle',
  'productSwitchDomRef',
  'profileDomRef',
  'secondaryTitle',
  'showCoPilot',
  'showNotifications',
  'showProductSwitch',
  'showSearchField',
])
@ProxyOutputs([
  'coPilotClick',
  'logoClick',
  'menuItemClick',
  'notificationsClick',
  'productSwitchClick',
  'profileClick',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'closeOverflow',
])
@Component({
  selector: 'ui5-shellbar',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ShellBar',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityAttributes: accessibility-attributes',
    'accessibilityRoles: accessibility-roles',
    'accessibilityTexts: accessibility-texts',
    'copilotDomRef: copilot-dom-ref',
    'logoDomRef: logo-dom-ref',
    'notificationsCount: notifications-count',
    'notificationsDomRef: notifications-dom-ref',
    'overflowDomRef: overflow-dom-ref',
    'primaryTitle: primary-title',
    'productSwitchDomRef: product-switch-dom-ref',
    'profileDomRef: profile-dom-ref',
    'secondaryTitle: secondary-title',
    'showCoPilot: show-co-pilot',
    'showNotifications: show-notifications',
    'showProductSwitch: show-product-switch',
    'showSearchField: show-search-field',
  ],
  outputs: [
    'coPilotClick: ui5CoPilotClick',
    'logoClick: ui5LogoClick',
    'menuItemClick: ui5MenuItemClick',
    'notificationsClick: ui5NotificationsClick',
    'productSwitchClick: ui5ProductSwitchClick',
    'profileClick: ui5ProfileClick',
  ],
  providers: [],
})
export class ShellBarComponent {
  copilotDomRef?: ShellBarElement['copilotDomRef'];
  logoDomRef?: ShellBarElement['logoDomRef'];
  notificationsCount?: ShellBarElement['notificationsCount'];
  notificationsDomRef?: ShellBarElement['notificationsDomRef'];
  overflowDomRef?: ShellBarElement['overflowDomRef'];
  primaryTitle?: ShellBarElement['primaryTitle'];
  productSwitchDomRef?: ShellBarElement['productSwitchDomRef'];
  profileDomRef?: ShellBarElement['profileDomRef'];
  secondaryTitle?: ShellBarElement['secondaryTitle'];
  showCoPilot?: ShellBarElement['showCoPilot'];
  showNotifications?: ShellBarElement['showNotifications'];
  showProductSwitch?: ShellBarElement['showProductSwitch'];
  showSearchField?: ShellBarElement['showSearchField'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ShellBarElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ShellBarElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ShellBarComponent extends Partial<ShellBarElement> {
  coPilotClick: EventEmitter<ShellBarComponentEventsMap['coPilotClick']>;
  logoClick: EventEmitter<ShellBarComponentEventsMap['logoClick']>;
  menuItemClick: EventEmitter<ShellBarComponentEventsMap['menuItemClick']>;
  notificationsClick: EventEmitter<
    ShellBarComponentEventsMap['notificationsClick']
  >;
  productSwitchClick: EventEmitter<
    ShellBarComponentEventsMap['productSwitchClick']
  >;
  profileClick: EventEmitter<ShellBarComponentEventsMap['profileClick']>;
}
"
`;

exports[`Snapshot test Fiori Side Navigation Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/SideNavigationItem.js';
import type SideNavigationItem from '@ui5/webcomponents-fiori/dist/SideNavigationItem.js';

interface SideNavigationItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

export declare interface SideNavigationItemElement
  extends Partial<
    Omit<
      SideNavigationItem,
      | 'click'
      | 'expanded'
      | 'icon'
      | 'selected'
      | 'text'
      | 'wholeItemToggleable'
    >
  > {
  expanded: boolean;
  icon: string;
  selected: boolean;
  text: string;
  wholeItemToggleable: boolean;
  addEventListener<K extends keyof SideNavigationItemComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationItemElement,
      ev: SideNavigationItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SideNavigationItemComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationItemElement,
      ev: SideNavigationItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'expanded',
  'icon',
  'selected',
  'text',
  'wholeItemToggleable',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-side-navigation-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SideNavigationItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'expanded',
    'icon',
    'selected',
    'text',
    'wholeItemToggleable: whole-item-toggleable',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class SideNavigationItemComponent {
  expanded?: SideNavigationItemElement['expanded'];
  icon?: SideNavigationItemElement['icon'];
  selected?: SideNavigationItemElement['selected'];
  text?: SideNavigationItemElement['text'];
  wholeItemToggleable?: SideNavigationItemElement['wholeItemToggleable'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SideNavigationItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SideNavigationItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SideNavigationItemComponent
  extends Partial<SideNavigationItemElement> {
  click: EventEmitter<SideNavigationItemComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Fiori Side Navigation Sub Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/SideNavigationSubItem.js';
import type SideNavigationSubItem from '@ui5/webcomponents-fiori/dist/SideNavigationSubItem.js';

interface SideNavigationSubItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

export declare interface SideNavigationSubItemElement
  extends Partial<
    Omit<SideNavigationSubItem, 'click' | 'icon' | 'selected' | 'text'>
  > {
  icon: string;
  selected: boolean;
  text: string;
  addEventListener<K extends keyof SideNavigationSubItemComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationSubItemElement,
      ev: SideNavigationSubItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SideNavigationSubItemComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationSubItemElement,
      ev: SideNavigationSubItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'icon', 'selected', 'text'])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-side-navigation-sub-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SideNavigationSubItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'icon',
    'selected',
    'text',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class SideNavigationSubItemComponent {
  icon?: SideNavigationSubItemElement['icon'];
  selected?: SideNavigationSubItemElement['selected'];
  text?: SideNavigationSubItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SideNavigationSubItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SideNavigationSubItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SideNavigationSubItemComponent
  extends Partial<SideNavigationSubItemElement> {
  click: EventEmitter<SideNavigationSubItemComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Fiori Side Navigation should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/SideNavigation.js';
import type SideNavigation from '@ui5/webcomponents-fiori/dist/SideNavigation.js';

interface SideNavigationComponentEventsMap
  extends Omit<HTMLElementEventMap, 'selectionChange'> {
  selectionChange: CustomEvent<{ item: any }>;
}

export declare interface SideNavigationElement
  extends Partial<Omit<SideNavigation, 'selectionChange' | 'collapsed'>> {
  collapsed: boolean;
  addEventListener<K extends keyof SideNavigationComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationElement,
      ev: SideNavigationComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SideNavigationComponentEventsMap>(
    type: K,
    listener: (
      this: SideNavigationElement,
      ev: SideNavigationComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'collapsed'])
@ProxyOutputs(['selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-side-navigation',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SideNavigation',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'collapsed',
  ],
  outputs: ['selectionChange: ui5SelectionChange'],
  providers: [],
})
export class SideNavigationComponent {
  collapsed?: SideNavigationElement['collapsed'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SideNavigationElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SideNavigationElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SideNavigationComponent
  extends Partial<SideNavigationElement> {
  selectionChange: EventEmitter<
    SideNavigationComponentEventsMap['selectionChange']
  >;
}
"
`;

exports[`Snapshot test Fiori Sort Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/SortItem.js';
import type SortItem from '@ui5/webcomponents-fiori/dist/SortItem.js';

export declare interface SortItemElement
  extends Partial<Omit<SortItem, 'selected' | 'text'>> {
  selected: boolean;
  text: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'selected', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-sort-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SortItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class SortItemComponent {
  selected?: SortItemElement['selected'];
  text?: SortItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SortItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SortItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SortItemComponent extends Partial<SortItemElement> {}
"
`;

exports[`Snapshot test Fiori Theming should match the snapshot 1`] = `
"import { WebcomponentsThemingProvider } from '@ui5/webcomponents-ngx/theming';
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
class Ui5WebcomponentsFioriThemingService extends WebcomponentsThemingProvider {
  name = 'ui-5-webcomponents-fiori-theming-service';
  constructor() {
    super(
      () =>
        import('@ui5/webcomponents-fiori/dist/generated/json-imports/Themes.js')
    );
  }
}

export { Ui5WebcomponentsFioriThemingService };
"
`;

exports[`Snapshot test Fiori Timeline Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/TimelineItem.js';
import type TimelineItem from '@ui5/webcomponents-fiori/dist/TimelineItem.js';

interface TimelineItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'nameClick'> {
  nameClick: CustomEvent<void>;
}

export declare interface TimelineItemElement
  extends Partial<
    Omit<
      TimelineItem,
      | 'nameClick'
      | 'icon'
      | 'name'
      | 'nameClickable'
      | 'subtitleText'
      | 'titleText'
    >
  > {
  icon: string;
  name: string;
  nameClickable: boolean;
  subtitleText: string;
  titleText: string;
  addEventListener<K extends keyof TimelineItemComponentEventsMap>(
    type: K,
    listener: (
      this: TimelineItemElement,
      ev: TimelineItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TimelineItemComponentEventsMap>(
    type: K,
    listener: (
      this: TimelineItemElement,
      ev: TimelineItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'icon',
  'name',
  'nameClickable',
  'subtitleText',
  'titleText',
])
@ProxyOutputs(['nameClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'focusLink',
])
@Component({
  selector: 'ui5-timeline-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TimelineItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'icon',
    'name',
    'nameClickable: name-clickable',
    'subtitleText: subtitle-text',
    'titleText: title-text',
  ],
  outputs: ['nameClick: ui5NameClick'],
  providers: [],
})
export class TimelineItemComponent {
  icon?: TimelineItemElement['icon'];
  name?: TimelineItemElement['name'];
  nameClickable?: TimelineItemElement['nameClickable'];
  subtitleText?: TimelineItemElement['subtitleText'];
  titleText?: TimelineItemElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TimelineItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TimelineItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TimelineItemComponent
  extends Partial<TimelineItemElement> {
  nameClick: EventEmitter<TimelineItemComponentEventsMap['nameClick']>;
}
"
`;

exports[`Snapshot test Fiori Timeline should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/Timeline.js';
import type Timeline from '@ui5/webcomponents-fiori/dist/Timeline.js';

export declare interface TimelineElement
  extends Partial<Omit<Timeline, 'accessibleName' | 'layout'>> {
  accessibleName: string;
  layout: 'Horizontal' | 'Vertical';
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'accessibleName', 'layout'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-timeline',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Timeline',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'layout',
  ],
  outputs: [],
  providers: [],
})
export class TimelineComponent {
  accessibleName?: TimelineElement['accessibleName'];
  layout?: TimelineElement['layout'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TimelineElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TimelineElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TimelineComponent extends Partial<TimelineElement> {}
"
`;

exports[`Snapshot test Fiori Ui 5 Fiori Module Ts should match the snapshot 1`] = `
"import { NgModule } from '@angular/core';
import { Ui5WebcomponentsFioriThemingService } from '@ui5/webcomponents-ngx/fiori/theming';
import '@ui5/webcomponents-fiori/dist/Assets.js';
import { BarComponent } from '@ui5/webcomponents-ngx/fiori/bar';
import { BarcodeScannerDialogComponent } from '@ui5/webcomponents-ngx/fiori/barcode-scanner-dialog';
import { DynamicSideContentComponent } from '@ui5/webcomponents-ngx/fiori/dynamic-side-content';
import { FilterItemComponent } from '@ui5/webcomponents-ngx/fiori/filter-item';
import { FilterItemOptionComponent } from '@ui5/webcomponents-ngx/fiori/filter-item-option';
import { FlexibleColumnLayoutComponent } from '@ui5/webcomponents-ngx/fiori/flexible-column-layout';
import { IllustratedMessageComponent } from '@ui5/webcomponents-ngx/fiori/illustrated-message';
import { MediaGalleryComponent } from '@ui5/webcomponents-ngx/fiori/media-gallery';
import { MediaGalleryItemComponent } from '@ui5/webcomponents-ngx/fiori/media-gallery-item';
import { NotificationActionComponent } from '@ui5/webcomponents-ngx/fiori/notification-action';
import { NotificationListGroupItemComponent } from '@ui5/webcomponents-ngx/fiori/notification-list-group-item';
import { NotificationListItemComponent } from '@ui5/webcomponents-ngx/fiori/notification-list-item';
import { NotificationListItemBaseComponent } from '@ui5/webcomponents-ngx/fiori/notification-list-item-base';
import { PageComponent } from '@ui5/webcomponents-ngx/fiori/page';
import { ProductSwitchComponent } from '@ui5/webcomponents-ngx/fiori/product-switch';
import { ProductSwitchItemComponent } from '@ui5/webcomponents-ngx/fiori/product-switch-item';
import { ShellBarComponent } from '@ui5/webcomponents-ngx/fiori/shell-bar';
import { ShellBarItemComponent } from '@ui5/webcomponents-ngx/fiori/shell-bar-item';
import { SideNavigationComponent } from '@ui5/webcomponents-ngx/fiori/side-navigation';
import { SideNavigationItemComponent } from '@ui5/webcomponents-ngx/fiori/side-navigation-item';
import { SideNavigationSubItemComponent } from '@ui5/webcomponents-ngx/fiori/side-navigation-sub-item';
import { SortItemComponent } from '@ui5/webcomponents-ngx/fiori/sort-item';
import { TimelineComponent } from '@ui5/webcomponents-ngx/fiori/timeline';
import { TimelineItemComponent } from '@ui5/webcomponents-ngx/fiori/timeline-item';
import { UploadCollectionComponent } from '@ui5/webcomponents-ngx/fiori/upload-collection';
import { UploadCollectionItemComponent } from '@ui5/webcomponents-ngx/fiori/upload-collection-item';
import { ViewSettingsDialogComponent } from '@ui5/webcomponents-ngx/fiori/view-settings-dialog';
import { WizardComponent } from '@ui5/webcomponents-ngx/fiori/wizard';
import { WizardStepComponent } from '@ui5/webcomponents-ngx/fiori/wizard-step';

const imports = [
  BarComponent,
  BarcodeScannerDialogComponent,
  DynamicSideContentComponent,
  FilterItemComponent,
  FilterItemOptionComponent,
  FlexibleColumnLayoutComponent,
  IllustratedMessageComponent,
  MediaGalleryComponent,
  MediaGalleryItemComponent,
  NotificationActionComponent,
  NotificationListGroupItemComponent,
  NotificationListItemComponent,
  NotificationListItemBaseComponent,
  PageComponent,
  ProductSwitchComponent,
  ProductSwitchItemComponent,
  ShellBarComponent,
  ShellBarItemComponent,
  SideNavigationComponent,
  SideNavigationItemComponent,
  SideNavigationSubItemComponent,
  SortItemComponent,
  TimelineComponent,
  TimelineItemComponent,
  UploadCollectionComponent,
  UploadCollectionItemComponent,
  ViewSettingsDialogComponent,
  WizardComponent,
  WizardStepComponent,
];
const exports = [...imports];

@NgModule({
  imports: [...imports],
  exports: [...exports],
})
class Ui5FioriModule {
  constructor(
    ui5WebcomponentsFioriThemingService: Ui5WebcomponentsFioriThemingService
  ) {}
}
export { Ui5FioriModule };
"
`;

exports[`Snapshot test Fiori Upload Collection Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/UploadCollectionItem.js';
import type UploadCollectionItem from '@ui5/webcomponents-fiori/dist/UploadCollectionItem.js';

interface UploadCollectionItemComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'detailClick' | 'fileNameClick' | 'rename' | 'retry' | 'terminate'
  > {
  detailClick: CustomEvent<void>;
  fileNameClick: CustomEvent<void>;
  rename: CustomEvent<void>;
  retry: CustomEvent<void>;
  terminate: CustomEvent<void>;
}

export declare interface UploadCollectionItemElement
  extends Partial<
    Omit<
      UploadCollectionItem,
      | 'detailClick'
      | 'fileNameClick'
      | 'rename'
      | 'retry'
      | 'terminate'
      | 'selected'
      | 'navigated'
      | 'type'
      | 'disableDeleteButton'
      | 'fileName'
      | 'fileNameClickable'
      | 'hideRetryButton'
      | 'hideTerminateButton'
      | 'uploadState'
    >
  > {
  selected: boolean;
  navigated: boolean;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
  disableDeleteButton: boolean;

  fileName: string;
  fileNameClickable: boolean;
  hideRetryButton: boolean;
  hideTerminateButton: boolean;

  uploadState: 'Complete' | 'Error' | 'Ready' | 'Uploading';
  addEventListener<K extends keyof UploadCollectionItemComponentEventsMap>(
    type: K,
    listener: (
      this: UploadCollectionItemElement,
      ev: UploadCollectionItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof UploadCollectionItemComponentEventsMap>(
    type: K,
    listener: (
      this: UploadCollectionItemElement,
      ev: UploadCollectionItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'navigated',
  'type',
  'disableDeleteButton',
  'file',
  'fileName',
  'fileNameClickable',
  'hideRetryButton',
  'hideTerminateButton',
  'progress',
  'uploadState',
])
@ProxyOutputs(['detailClick', 'fileNameClick', 'rename', 'retry', 'terminate'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-upload-collection-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5UploadCollectionItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'navigated',
    'type',
    'disableDeleteButton: disable-delete-button',
    'file',
    'fileName: file-name',
    'fileNameClickable: file-name-clickable',
    'hideRetryButton: hide-retry-button',
    'hideTerminateButton: hide-terminate-button',
    'progress',
    'uploadState: upload-state',
  ],
  outputs: [
    'detailClick: ui5DetailClick',
    'fileNameClick: ui5FileNameClick',
    'rename: ui5Rename',
    'retry: ui5Retry',
    'terminate: ui5Terminate',
  ],
  providers: [],
})
export class UploadCollectionItemComponent {
  selected?: UploadCollectionItemElement['selected'];
  navigated?: UploadCollectionItemElement['navigated'];
  type?: UploadCollectionItemElement['type'];
  disableDeleteButton?: UploadCollectionItemElement['disableDeleteButton'];
  fileName?: UploadCollectionItemElement['fileName'];
  fileNameClickable?: UploadCollectionItemElement['fileNameClickable'];
  hideRetryButton?: UploadCollectionItemElement['hideRetryButton'];
  hideTerminateButton?: UploadCollectionItemElement['hideTerminateButton'];
  uploadState?: UploadCollectionItemElement['uploadState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<UploadCollectionItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): UploadCollectionItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface UploadCollectionItemComponent
  extends Partial<UploadCollectionItemElement> {
  detailClick: EventEmitter<
    UploadCollectionItemComponentEventsMap['detailClick']
  >;
  fileNameClick: EventEmitter<
    UploadCollectionItemComponentEventsMap['fileNameClick']
  >;
  rename: EventEmitter<UploadCollectionItemComponentEventsMap['rename']>;
  retry: EventEmitter<UploadCollectionItemComponentEventsMap['retry']>;
  terminate: EventEmitter<UploadCollectionItemComponentEventsMap['terminate']>;
}
"
`;

exports[`Snapshot test Fiori Upload Collection should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/UploadCollection.js';
import type UploadCollection from '@ui5/webcomponents-fiori/dist/UploadCollection.js';

interface UploadCollectionComponentEventsMap
  extends Omit<HTMLElementEventMap, 'drop' | 'itemDelete' | 'selectionChange'> {
  drop: CustomEvent<{ dataTransfer: any }>;
  itemDelete: CustomEvent<{ item: HTMLElement }>;
  selectionChange: CustomEvent<{ selectedItems: Array<any> }>;
}

export declare interface UploadCollectionElement
  extends Partial<
    Omit<
      UploadCollection,
      | 'drop'
      | 'itemDelete'
      | 'selectionChange'
      | 'accessibleName'
      | 'hideDragOverlay'
      | 'mode'
      | 'noDataDescription'
      | 'noDataText'
    >
  > {
  accessibleName: string;
  hideDragOverlay: boolean;
  mode:
    | 'Delete'
    | 'MultiSelect'
    | 'None'
    | 'SingleSelect'
    | 'SingleSelectAuto'
    | 'SingleSelectBegin'
    | 'SingleSelectEnd';
  noDataDescription: string;
  noDataText: string;
  addEventListener<K extends keyof UploadCollectionComponentEventsMap>(
    type: K,
    listener: (
      this: UploadCollectionElement,
      ev: UploadCollectionComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof UploadCollectionComponentEventsMap>(
    type: K,
    listener: (
      this: UploadCollectionElement,
      ev: UploadCollectionComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'hideDragOverlay',
  'mode',
  'noDataDescription',
  'noDataText',
])
@ProxyOutputs(['drop', 'itemDelete', 'selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-upload-collection',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5UploadCollection',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'hideDragOverlay: hide-drag-overlay',
    'mode',
    'noDataDescription: no-data-description',
    'noDataText: no-data-text',
  ],
  outputs: [
    'drop: ui5Drop',
    'itemDelete: ui5ItemDelete',
    'selectionChange: ui5SelectionChange',
  ],
  providers: [],
})
export class UploadCollectionComponent {
  accessibleName?: UploadCollectionElement['accessibleName'];
  hideDragOverlay?: UploadCollectionElement['hideDragOverlay'];
  mode?: UploadCollectionElement['mode'];
  noDataDescription?: UploadCollectionElement['noDataDescription'];
  noDataText?: UploadCollectionElement['noDataText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<UploadCollectionElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): UploadCollectionElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface UploadCollectionComponent
  extends Partial<UploadCollectionElement> {
  drop: EventEmitter<UploadCollectionComponentEventsMap['drop']>;
  itemDelete: EventEmitter<UploadCollectionComponentEventsMap['itemDelete']>;
  selectionChange: EventEmitter<
    UploadCollectionComponentEventsMap['selectionChange']
  >;
}
"
`;

exports[`Snapshot test Fiori View Settings Dialog should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js';
import type ViewSettingsDialog from '@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js';

interface ViewSettingsDialogComponentEventsMap
  extends Omit<HTMLElementEventMap, 'beforeOpen' | 'cancel' | 'confirm'> {
  beforeOpen: CustomEvent<void>;
  cancel: CustomEvent<{
    sortOrder: string;
    sortBy: string;
    sortByItem: HTMLElement;
    sortDescending: boolean;
    filterItems: Array<any>;
  }>;
  confirm: CustomEvent<{
    sortOrder: string;
    sortBy: string;
    sortByItem: HTMLElement;
    sortDescending: boolean;
    filterItems: Array<any>;
  }>;
}

export declare interface ViewSettingsDialogElement
  extends Partial<
    Omit<
      ViewSettingsDialog,
      'beforeOpen' | 'cancel' | 'confirm' | 'sortDescending'
    >
  > {
  sortDescending: boolean;
  addEventListener<K extends keyof ViewSettingsDialogComponentEventsMap>(
    type: K,
    listener: (
      this: ViewSettingsDialogElement,
      ev: ViewSettingsDialogComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ViewSettingsDialogComponentEventsMap>(
    type: K,
    listener: (
      this: ViewSettingsDialogElement,
      ev: ViewSettingsDialogComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'sortDescending'])
@ProxyOutputs(['beforeOpen', 'cancel', 'confirm'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'setConfirmedSettings',
  'show',
])
@Component({
  selector: 'ui5-view-settings-dialog',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ViewSettingsDialog',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'sortDescending: sort-descending',
  ],
  outputs: [
    'beforeOpen: ui5BeforeOpen',
    'cancel: ui5Cancel',
    'confirm: ui5Confirm',
  ],
  providers: [],
})
export class ViewSettingsDialogComponent {
  sortDescending?: ViewSettingsDialogElement['sortDescending'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ViewSettingsDialogElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ViewSettingsDialogElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ViewSettingsDialogComponent
  extends Partial<ViewSettingsDialogElement> {
  beforeOpen: EventEmitter<ViewSettingsDialogComponentEventsMap['beforeOpen']>;
  cancel: EventEmitter<ViewSettingsDialogComponentEventsMap['cancel']>;
  confirm: EventEmitter<ViewSettingsDialogComponentEventsMap['confirm']>;
}
"
`;

exports[`Snapshot test Fiori Wizard Step should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents-fiori/dist/WizardStep.js';
import type WizardStep from '@ui5/webcomponents-fiori/dist/WizardStep.js';

export declare interface WizardStepElement
  extends Partial<
    Omit<
      WizardStep,
      | 'branching'
      | 'disabled'
      | 'icon'
      | 'selected'
      | 'subtitleText'
      | 'titleText'
    >
  > {
  branching: boolean;
  disabled: boolean;
  icon: string;
  selected: boolean;
  subtitleText: string;
  titleText: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'branching',
  'disabled',
  'icon',
  'selected',
  'subtitleText',
  'titleText',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-wizard-step',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5WizardStep',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'branching',
    'disabled',
    'icon',
    'selected',
    'subtitleText: subtitle-text',
    'titleText: title-text',
  ],
  outputs: [],
  providers: [],
})
export class WizardStepComponent {
  branching?: WizardStepElement['branching'];
  disabled?: WizardStepElement['disabled'];
  icon?: WizardStepElement['icon'];
  selected?: WizardStepElement['selected'];
  subtitleText?: WizardStepElement['subtitleText'];
  titleText?: WizardStepElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<WizardStepElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): WizardStepElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface WizardStepComponent
  extends Partial<WizardStepElement> {}
"
`;

exports[`Snapshot test Fiori Wizard should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { WizardStepComponent } from '@ui5/webcomponents-ngx/fiori/wizard-step';
import '@ui5/webcomponents-fiori/dist/Wizard.js';
import type Wizard from '@ui5/webcomponents-fiori/dist/Wizard.js';

interface WizardComponentEventsMap
  extends Omit<HTMLElementEventMap, 'stepChange'> {
  stepChange: CustomEvent<{
    step: WizardStepComponent['element'];
    previousStep: WizardStepComponent['element'];
    changeWithClick: boolean;
  }>;
}

export declare interface WizardElement
  extends Partial<Omit<Wizard, 'stepChange'>> {
  addEventListener<K extends keyof WizardComponentEventsMap>(
    type: K,
    listener: (this: WizardElement, ev: WizardComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof WizardComponentEventsMap>(
    type: K,
    listener: (this: WizardElement, ev: WizardComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs(['stepChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-wizard',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Wizard',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: ['stepChange: ui5StepChange'],
  providers: [],
})
export class WizardComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<WizardElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): WizardElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface WizardComponent extends Partial<WizardElement> {
  stepChange: EventEmitter<WizardComponentEventsMap['stepChange']>;
}
"
`;
