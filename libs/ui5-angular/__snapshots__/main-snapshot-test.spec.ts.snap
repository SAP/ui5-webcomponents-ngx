// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test Main Avatar Group should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/AvatarGroup.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface AvatarGroupComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click' | 'overflow'> {
  click: CustomEvent<{
    targetRef: HTMLElement;
    overflowButtonClicked: boolean;
  }>;
  overflow: CustomEvent<void>;
}

interface AvatarGroupComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'colorScheme'
    | 'hiddenItems'
    | 'type'
    | 'click'
    | 'overflow'
    | 'overflowButton'
  > {
  effectiveDir: any;
  isUi5Element: any;
  colorScheme: Array<
    | 'Accent1'
    | 'Accent10'
    | 'Accent2'
    | 'Accent3'
    | 'Accent4'
    | 'Accent5'
    | 'Accent6'
    | 'Accent7'
    | 'Accent8'
    | 'Accent9'
    | 'Placeholder'
  >;
  hiddenItems: Array<HTMLElement>;
  type: 'Group' | 'Individual';

  overflowButton: HTMLElement;

  addEventListener<K extends keyof AvatarGroupComponentEventsMap>(
    type: K,
    listener: (
      this: AvatarGroupComponentElement,
      ev: AvatarGroupComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof AvatarGroupComponentEventsMap>(
    type: K,
    listener: (
      this: AvatarGroupComponentElement,
      ev: AvatarGroupComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'colorScheme',
  'hiddenItems',
  'type',
])
@ProxyOutputs(['click', 'overflow'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-avatar-group',
  exportAs: 'ui5AvatarGroup',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'colorScheme: color-scheme',
    'hiddenItems: hidden-items',
    'type',
  ],
  outputs: ['click: ui5Click', 'overflow: ui5Overflow'],
})
export class AvatarGroupComponent {
  colorScheme?: AvatarGroupComponentElement['colorScheme'];
  hiddenItems?: AvatarGroupComponentElement['hiddenItems'];
  type?: AvatarGroupComponentElement['type'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<AvatarGroupComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get overflowButton(): HTMLElement {
    return this.elementRef.nativeElement.overflowButton;
  }
}
export declare interface AvatarGroupComponent
  extends Partial<AvatarGroupComponentElement> {}
"
`;

exports[`Snapshot test Main Avatar should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Avatar.js';
import type Avatar from '@ui5/webcomponents/dist/Avatar.js';

export declare interface AvatarElement
  extends Partial<
    Omit<
      Avatar,
      | 'accessibleName'
      | 'colorScheme'
      | 'icon'
      | 'initials'
      | 'interactive'
      | 'shape'
      | 'size'
    >
  > {
  accessibleName: string;
  colorScheme:
    | 'Accent1'
    | 'Accent10'
    | 'Accent2'
    | 'Accent3'
    | 'Accent4'
    | 'Accent5'
    | 'Accent6'
    | 'Accent7'
    | 'Accent8'
    | 'Accent9'
    | 'Placeholder';
  icon: string;
  initials: string;
  interactive: boolean;
  shape: 'Circle' | 'Square';
  size: 'L' | 'M' | 'S' | 'XL' | 'XS';
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'colorScheme',
  'icon',
  'initials',
  'interactive',
  'shape',
  'size',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-avatar',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Avatar',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'colorScheme: color-scheme',
    'icon',
    'initials',
    'interactive',
    'shape',
    'size',
  ],
  outputs: [],
  providers: [],
})
export class AvatarComponent {
  accessibleName?: AvatarElement['accessibleName'];
  colorScheme?: AvatarElement['colorScheme'];
  icon?: AvatarElement['icon'];
  initials?: AvatarElement['initials'];
  interactive?: AvatarElement['interactive'];
  shape?: AvatarElement['shape'];
  size?: AvatarElement['size'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<AvatarElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): AvatarElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface AvatarComponent extends Partial<AvatarElement> {}
"
`;

exports[`Snapshot test Main Badge should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Badge.js';
import type Badge from '@ui5/webcomponents/dist/Badge.js';

export declare interface BadgeElement
  extends Partial<Omit<Badge, 'colorScheme'>> {
  colorScheme: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'colorScheme'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-badge',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Badge',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'colorScheme: color-scheme',
  ],
  outputs: [],
  providers: [],
})
export class BadgeComponent {
  colorScheme?: BadgeElement['colorScheme'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BadgeElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BadgeElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BadgeComponent extends Partial<BadgeElement> {}
"
`;

exports[`Snapshot test Main Breadcrumbs Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/BreadcrumbsItem.js';
import type BreadcrumbsItem from '@ui5/webcomponents/dist/BreadcrumbsItem.js';

export declare interface BreadcrumbsItemElement
  extends Partial<Omit<BreadcrumbsItem, 'accessibleName' | 'href' | 'target'>> {
  accessibleName: string;
  href: string;
  target: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'href',
  'target',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-breadcrumbs-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5BreadcrumbsItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'href',
    'target',
  ],
  outputs: [],
  providers: [],
})
export class BreadcrumbsItemComponent {
  accessibleName?: BreadcrumbsItemElement['accessibleName'];
  href?: BreadcrumbsItemElement['href'];
  target?: BreadcrumbsItemElement['target'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BreadcrumbsItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BreadcrumbsItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BreadcrumbsItemComponent
  extends Partial<BreadcrumbsItemElement> {}
"
`;

exports[`Snapshot test Main Breadcrumbs should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Breadcrumbs.js';
import type Breadcrumbs from '@ui5/webcomponents/dist/Breadcrumbs.js';

interface BreadcrumbsComponentEventsMap
  extends Omit<HTMLElementEventMap, 'itemClick'> {
  itemClick: CustomEvent<{
    item: HTMLElement;
    altKey: boolean;
    ctrlKey: boolean;
    metaKey: boolean;
    shiftKey: boolean;
  }>;
}

export declare interface BreadcrumbsElement
  extends Partial<
    Omit<Breadcrumbs, 'itemClick' | 'design' | 'separatorStyle'>
  > {
  design: 'NoCurrentPage' | 'Standard';
  separatorStyle:
    | 'BackSlash'
    | 'DoubleBackSlash'
    | 'DoubleGreaterThan'
    | 'DoubleSlash'
    | 'GreaterThan'
    | 'Slash';
  addEventListener<K extends keyof BreadcrumbsComponentEventsMap>(
    type: K,
    listener: (
      this: BreadcrumbsElement,
      ev: BreadcrumbsComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof BreadcrumbsComponentEventsMap>(
    type: K,
    listener: (
      this: BreadcrumbsElement,
      ev: BreadcrumbsComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'design', 'separatorStyle'])
@ProxyOutputs(['itemClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-breadcrumbs',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Breadcrumbs',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'design',
    'separatorStyle: separator-style',
  ],
  outputs: ['itemClick: ui5ItemClick'],
  providers: [],
})
export class BreadcrumbsComponent {
  design?: BreadcrumbsElement['design'];
  separatorStyle?: BreadcrumbsElement['separatorStyle'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BreadcrumbsElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BreadcrumbsElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BreadcrumbsComponent
  extends Partial<BreadcrumbsElement> {
  itemClick: EventEmitter<BreadcrumbsComponentEventsMap['itemClick']>;
}
"
`;

exports[`Snapshot test Main Busy Indicator should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/BusyIndicator.js';
import type BusyIndicator from '@ui5/webcomponents/dist/BusyIndicator.js';

export declare interface BusyIndicatorElement
  extends Partial<Omit<BusyIndicator, 'active' | 'size' | 'text'>> {
  active: boolean;

  size: 'Large' | 'Medium' | 'Small';
  text: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'active',
  'delay',
  'size',
  'text',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-busy-indicator',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5BusyIndicator',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'active',
    'delay',
    'size',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class BusyIndicatorComponent {
  active?: BusyIndicatorElement['active'];
  size?: BusyIndicatorElement['size'];
  text?: BusyIndicatorElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<BusyIndicatorElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): BusyIndicatorElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface BusyIndicatorComponent
  extends Partial<BusyIndicatorElement> {}
"
`;

exports[`Snapshot test Main Button should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Button.js';
import type Button from '@ui5/webcomponents/dist/Button.js';

interface ButtonComponentEventsMap extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

export declare interface ButtonElement
  extends Partial<
    Omit<
      Button,
      | 'click'
      | 'accessibilityAttributes'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'design'
      | 'disabled'
      | 'icon'
      | 'iconEnd'
      | 'submits'
      | 'tooltip'
    >
  > {
  accessibilityAttributes: {
    expanded?: boolean;
    hasPopup?: 'Dialog' | 'Grid' | 'Listbox' | 'Menu' | 'Tree';
    controls?: string | HTMLElement | Array<HTMLElement | string>;
  };
  accessibleName: string;
  accessibleNameRef: string;
  design:
    | 'Attention'
    | 'Default'
    | 'Emphasized'
    | 'Negative'
    | 'Positive'
    | 'Transparent';
  disabled: boolean;
  icon: string;
  iconEnd: boolean;
  submits: boolean;
  tooltip: string;
  addEventListener<K extends keyof ButtonComponentEventsMap>(
    type: K,
    listener: (this: ButtonElement, ev: ButtonComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ButtonComponentEventsMap>(
    type: K,
    listener: (this: ButtonElement, ev: ButtonComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityAttributes',
  'accessibleName',
  'accessibleNameRef',
  'design',
  'disabled',
  'icon',
  'iconEnd',
  'submits',
  'tooltip',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-button',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Button',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityAttributes: accessibility-attributes',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'design',
    'disabled',
    'icon',
    'iconEnd: icon-end',
    'submits',
    'tooltip',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class ButtonComponent {
  accessibilityAttributes?: ButtonElement['accessibilityAttributes'];
  accessibleName?: ButtonElement['accessibleName'];
  accessibleNameRef?: ButtonElement['accessibleNameRef'];
  design?: ButtonElement['design'];
  disabled?: ButtonElement['disabled'];
  icon?: ButtonElement['icon'];
  iconEnd?: ButtonElement['iconEnd'];
  submits?: ButtonElement['submits'];
  tooltip?: ButtonElement['tooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ButtonElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ButtonElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ButtonComponent extends Partial<ButtonElement> {
  click: EventEmitter<ButtonComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Main Calendar Date should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/CalendarDate.js';
import type CalendarDate from '@ui5/webcomponents/dist/CalendarDate.js';

export declare interface CalendarDateElement
  extends Partial<Omit<CalendarDate, 'value'>> {
  value: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'value'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-date',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5CalendarDate',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'value',
  ],
  outputs: [],
  providers: [],
})
export class CalendarDateComponent {
  value?: CalendarDateElement['value'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CalendarDateElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CalendarDateElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CalendarDateComponent
  extends Partial<CalendarDateElement> {}
"
`;

exports[`Snapshot test Main Calendar should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Calendar.js';
import type Calendar from '@ui5/webcomponents/dist/Calendar.js';

interface CalendarComponentEventsMap
  extends Omit<HTMLElementEventMap, 'selectedDatesChange'> {
  selectedDatesChange: CustomEvent<{ values: Array<any>; dates: Array<any> }>;
}

export declare interface CalendarElement
  extends Partial<
    Omit<
      Calendar,
      | 'selectedDatesChange'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
      | 'hideWeekNumbers'
      | 'selectionMode'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  hideWeekNumbers: boolean;
  selectionMode: 'Multiple' | 'Range' | 'Single';
  addEventListener<K extends keyof CalendarComponentEventsMap>(
    type: K,
    listener: (this: CalendarElement, ev: CalendarComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof CalendarComponentEventsMap>(
    type: K,
    listener: (this: CalendarElement, ev: CalendarComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'hideWeekNumbers',
  'selectionMode',
])
@ProxyOutputs(['selectedDatesChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  '_safelyModifyTimestampBy',
  '_safelySetTimestamp',
])
@Component({
  selector: 'ui5-calendar',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Calendar',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'hideWeekNumbers: hide-week-numbers',
    'selectionMode: selection-mode',
  ],
  outputs: ['selectedDatesChange: ui5SelectedDatesChange'],
  providers: [],
})
export class CalendarComponent {
  formatPattern?: CalendarElement['formatPattern'];
  maxDate?: CalendarElement['maxDate'];
  minDate?: CalendarElement['minDate'];
  primaryCalendarType?: CalendarElement['primaryCalendarType'];
  secondaryCalendarType?: CalendarElement['secondaryCalendarType'];
  hideWeekNumbers?: CalendarElement['hideWeekNumbers'];
  selectionMode?: CalendarElement['selectionMode'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CalendarElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CalendarElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CalendarComponent extends Partial<CalendarElement> {
  selectedDatesChange: EventEmitter<
    CalendarComponentEventsMap['selectedDatesChange']
  >;
}
"
`;

exports[`Snapshot test Main Card Header should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/CardHeader.js';
import type CardHeader from '@ui5/webcomponents/dist/CardHeader.js';

interface CardHeaderComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

export declare interface CardHeaderElement
  extends Partial<
    Omit<
      CardHeader,
      'click' | 'interactive' | 'status' | 'subtitleText' | 'titleText'
    >
  > {
  interactive: boolean;
  status: string;
  subtitleText: string;
  titleText: string;
  addEventListener<K extends keyof CardHeaderComponentEventsMap>(
    type: K,
    listener: (
      this: CardHeaderElement,
      ev: CardHeaderComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof CardHeaderComponentEventsMap>(
    type: K,
    listener: (
      this: CardHeaderElement,
      ev: CardHeaderComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'interactive',
  'status',
  'subtitleText',
  'titleText',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-card-header',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5CardHeader',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'interactive',
    'status',
    'subtitleText: subtitle-text',
    'titleText: title-text',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class CardHeaderComponent {
  interactive?: CardHeaderElement['interactive'];
  status?: CardHeaderElement['status'];
  subtitleText?: CardHeaderElement['subtitleText'];
  titleText?: CardHeaderElement['titleText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CardHeaderElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CardHeaderElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CardHeaderComponent
  extends Partial<CardHeaderElement> {
  click: EventEmitter<CardHeaderComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Main Card should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Card.js';
import type Card from '@ui5/webcomponents/dist/Card.js';

export declare interface CardElement
  extends Partial<Omit<Card, 'accessibleName' | 'accessibleNameRef'>> {
  accessibleName: string;
  accessibleNameRef: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-card',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Card',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
  ],
  outputs: [],
  providers: [],
})
export class CardComponent {
  accessibleName?: CardElement['accessibleName'];
  accessibleNameRef?: CardElement['accessibleNameRef'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CardElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CardElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CardComponent extends Partial<CardElement> {}
"
`;

exports[`Snapshot test Main Carousel should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Carousel.js';
import type Carousel from '@ui5/webcomponents/dist/Carousel.js';

interface CarouselComponentEventsMap
  extends Omit<HTMLElementEventMap, 'navigate'> {
  navigate: CustomEvent<{ selectedIndex: number }>;
}

export declare interface CarouselElement
  extends Partial<
    Omit<
      Carousel,
      | 'navigate'
      | 'arrowsPlacement'
      | 'cyclic'
      | 'hideNavigationArrows'
      | 'hidePageIndicator'
      | 'pageIndicatorStyle'
    >
  > {
  arrowsPlacement: 'Content' | 'Navigation';
  cyclic: boolean;
  hideNavigationArrows: boolean;
  hidePageIndicator: boolean;

  pageIndicatorStyle: 'Default' | 'Numeric';
  addEventListener<K extends keyof CarouselComponentEventsMap>(
    type: K,
    listener: (this: CarouselElement, ev: CarouselComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof CarouselComponentEventsMap>(
    type: K,
    listener: (this: CarouselElement, ev: CarouselComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'arrowsPlacement',
  'cyclic',
  'hideNavigationArrows',
  'hidePageIndicator',
  'itemsPerPageL',
  'itemsPerPageM',
  'itemsPerPageS',
  'pageIndicatorStyle',
])
@ProxyOutputs(['navigate'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'navigateTo',
])
@Component({
  selector: 'ui5-carousel',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Carousel',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'arrowsPlacement: arrows-placement',
    'cyclic',
    'hideNavigationArrows: hide-navigation-arrows',
    'hidePageIndicator: hide-page-indicator',
    'itemsPerPageL: items-per-page-l',
    'itemsPerPageM: items-per-page-m',
    'itemsPerPageS: items-per-page-s',
    'pageIndicatorStyle: page-indicator-style',
  ],
  outputs: ['navigate: ui5Navigate'],
  providers: [],
})
export class CarouselComponent {
  arrowsPlacement?: CarouselElement['arrowsPlacement'];
  cyclic?: CarouselElement['cyclic'];
  hideNavigationArrows?: CarouselElement['hideNavigationArrows'];
  hidePageIndicator?: CarouselElement['hidePageIndicator'];
  pageIndicatorStyle?: CarouselElement['pageIndicatorStyle'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CarouselElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CarouselElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CarouselComponent extends Partial<CarouselElement> {
  navigate: EventEmitter<CarouselComponentEventsMap['navigate']>;
}
"
`;

exports[`Snapshot test Main Check Box should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/CheckBox.js';
import type CheckBox from '@ui5/webcomponents/dist/CheckBox.js';

interface CheckBoxComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

export declare interface CheckBoxElement
  extends Partial<
    Omit<
      CheckBox,
      | 'change'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'checked'
      | 'disabled'
      | 'indeterminate'
      | 'name'
      | 'readonly'
      | 'required'
      | 'text'
      | 'valueState'
      | 'wrappingType'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  checked: boolean;
  disabled: boolean;
  indeterminate: boolean;
  name: string;
  readonly: boolean;
  required: boolean;
  text: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  wrappingType: 'None' | 'Normal';
  addEventListener<K extends keyof CheckBoxComponentEventsMap>(
    type: K,
    listener: (this: CheckBoxElement, ev: CheckBoxComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof CheckBoxComponentEventsMap>(
    type: K,
    listener: (this: CheckBoxElement, ev: CheckBoxComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'checked',
  'disabled',
  'indeterminate',
  'name',
  'readonly',
  'required',
  'text',
  'valueState',
  'wrappingType',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-checkbox',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5CheckBox',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'checked',
    'disabled',
    'indeterminate',
    'name',
    'readonly',
    'required',
    'text',
    'valueState: value-state',
    'wrappingType: wrapping-type',
  ],
  outputs: ['change: ui5Change'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => CheckBoxComponent),
      multi: true,
    },
  ],
})
export class CheckBoxComponent extends GenericControlValueAccessor {
  accessibleName?: CheckBoxElement['accessibleName'];
  accessibleNameRef?: CheckBoxElement['accessibleNameRef'];
  checked?: CheckBoxElement['checked'];
  disabled?: CheckBoxElement['disabled'];
  indeterminate?: CheckBoxElement['indeterminate'];
  name?: CheckBoxElement['name'];
  readonly?: CheckBoxElement['readonly'];
  required?: CheckBoxElement['required'];
  text?: CheckBoxElement['text'];
  valueState?: CheckBoxElement['valueState'];
  wrappingType?: CheckBoxElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CheckBoxElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.checked;
      },
      set value(val) {
        elementRef.nativeElement.checked = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): CheckBoxElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CheckBoxComponent extends Partial<CheckBoxElement> {
  change: EventEmitter<CheckBoxComponentEventsMap['change']>;
}
"
`;

exports[`Snapshot test Main Color Palette Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ColorPaletteItem.js';
import type ColorPaletteItem from '@ui5/webcomponents/dist/ColorPaletteItem.js';

export declare interface ColorPaletteItemElement
  extends Partial<ColorPaletteItem> {}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'value'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-color-palette-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ColorPaletteItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'value',
  ],
  outputs: [],
  providers: [],
})
export class ColorPaletteItemComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ColorPaletteItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ColorPaletteItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ColorPaletteItemComponent
  extends Partial<ColorPaletteItemElement> {}
"
`;

exports[`Snapshot test Main Color Palette Popover should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ColorPalettePopover.js';
import type ColorPalettePopover from '@ui5/webcomponents/dist/ColorPalettePopover.js';

interface ColorPalettePopoverComponentEventsMap
  extends Omit<HTMLElementEventMap, 'itemClick'> {
  itemClick: CustomEvent<{ color: string }>;
}

export declare interface ColorPalettePopoverElement
  extends Partial<
    Omit<
      ColorPalettePopover,
      'itemClick' | 'showDefaultColor' | 'showMoreColors' | 'showRecentColors'
    >
  > {
  showDefaultColor: boolean;
  showMoreColors: boolean;
  showRecentColors: boolean;
  addEventListener<K extends keyof ColorPalettePopoverComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPalettePopoverElement,
      ev: ColorPalettePopoverComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ColorPalettePopoverComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPalettePopoverElement,
      ev: ColorPalettePopoverComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'defaultColor',
  'showDefaultColor',
  'showMoreColors',
  'showRecentColors',
])
@ProxyOutputs(['itemClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'openPopover',
  'showAt',
])
@Component({
  selector: 'ui5-color-palette-popover',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ColorPalettePopover',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'defaultColor: default-color',
    'showDefaultColor: show-default-color',
    'showMoreColors: show-more-colors',
    'showRecentColors: show-recent-colors',
  ],
  outputs: ['itemClick: ui5ItemClick'],
  providers: [],
})
export class ColorPalettePopoverComponent {
  showDefaultColor?: ColorPalettePopoverElement['showDefaultColor'];
  showMoreColors?: ColorPalettePopoverElement['showMoreColors'];
  showRecentColors?: ColorPalettePopoverElement['showRecentColors'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ColorPalettePopoverElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ColorPalettePopoverElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ColorPalettePopoverComponent
  extends Partial<ColorPalettePopoverElement> {
  itemClick: EventEmitter<ColorPalettePopoverComponentEventsMap['itemClick']>;
}
"
`;

exports[`Snapshot test Main Color Palette should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ColorPalette.js';
import type ColorPalette from '@ui5/webcomponents/dist/ColorPalette.js';

interface ColorPaletteComponentEventsMap
  extends Omit<HTMLElementEventMap, 'itemClick'> {
  itemClick: CustomEvent<{ color: string }>;
}

export declare interface ColorPaletteElement
  extends Partial<Omit<ColorPalette, 'itemClick'>> {
  addEventListener<K extends keyof ColorPaletteComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPaletteElement,
      ev: ColorPaletteComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ColorPaletteComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPaletteElement,
      ev: ColorPaletteComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs(['itemClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-color-palette',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ColorPalette',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: ['itemClick: ui5ItemClick'],
  providers: [],
})
export class ColorPaletteComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ColorPaletteElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ColorPaletteElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ColorPaletteComponent
  extends Partial<ColorPaletteElement> {
  itemClick: EventEmitter<ColorPaletteComponentEventsMap['itemClick']>;
}
"
`;

exports[`Snapshot test Main Color Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ColorPicker.js';
import type ColorPicker from '@ui5/webcomponents/dist/ColorPicker.js';

interface ColorPickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

export declare interface ColorPickerElement
  extends Partial<Omit<ColorPicker, 'change'>> {
  addEventListener<K extends keyof ColorPickerComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPickerElement,
      ev: ColorPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ColorPickerComponentEventsMap>(
    type: K,
    listener: (
      this: ColorPickerElement,
      ev: ColorPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'color'])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-color-picker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ColorPicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'color',
  ],
  outputs: ['change: ui5Change'],
  providers: [],
})
export class ColorPickerComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ColorPickerElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ColorPickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ColorPickerComponent
  extends Partial<ColorPickerElement> {
  change: EventEmitter<ColorPickerComponentEventsMap['change']>;
}
"
`;

exports[`Snapshot test Main Combo Box Group Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/ComboBoxGroupItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface ComboBoxGroupItemComponentElement
  extends Omit<HTMLElement, 'effectiveDir' | 'isUi5Element' | 'text'> {
  effectiveDir: any;
  isUi5Element: any;
  text: string;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-cb-group-item',
  exportAs: 'ui5CbGroupItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'text',
  ],
  outputs: [],
})
export class ComboBoxGroupItemComponent {
  text?: ComboBoxGroupItemComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ComboBoxGroupItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface ComboBoxGroupItemComponent
  extends Partial<ComboBoxGroupItemComponentElement> {}
"
`;

exports[`Snapshot test Main Combo Box Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/ComboBoxItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface ComboBoxItemComponentElement
  extends Omit<
    HTMLElement,
    'effectiveDir' | 'isUi5Element' | 'additionalText' | 'text'
  > {
  effectiveDir: any;
  isUi5Element: any;
  additionalText: string;
  text: string;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'additionalText', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-cb-item',
  exportAs: 'ui5CbItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'text',
  ],
  outputs: [],
})
export class ComboBoxItemComponent {
  additionalText?: ComboBoxItemComponentElement['additionalText'];
  text?: ComboBoxItemComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ComboBoxItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface ComboBoxItemComponent
  extends Partial<ComboBoxItemComponentElement> {}
"
`;

exports[`Snapshot test Main Combo Box should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  forwardRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/ComboBox.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { Observable, fromEvent, merge } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import { IconComponent } from '@ui5/webcomponents-ngx/main/icon';

interface ComboBoxComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input' | 'selectionChange'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
  selectionChange: CustomEvent<{ item: HTMLElement }>;
}

interface ComboBoxComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'disabled'
    | 'filter'
    | 'loading'
    | 'placeholder'
    | 'readonly'
    | 'required'
    | 'value'
    | 'valueState'
    | 'change'
    | 'input'
    | 'selectionChange'
    | 'icon'
    | 'valueStateMessage'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;
  filter: string;
  loading: boolean;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  icon: Array<IconComponent['element']>;
  valueStateMessage: Array<HTMLElement>;

  addEventListener<K extends keyof ComboBoxComponentEventsMap>(
    type: K,
    listener: (
      this: ComboBoxComponentElement,
      ev: ComboBoxComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ComboBoxComponentEventsMap>(
    type: K,
    listener: (
      this: ComboBoxComponentElement,
      ev: ComboBoxComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'filter',
  'loading',
  'placeholder',
  'readonly',
  'required',
  'value',
  'valueState',
])
@ProxyOutputs(['change', 'input', 'selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-combobox',
  exportAs: 'ui5Combobox',
  standalone: true,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => ComboBoxComponent),
      multi: true,
    },
  ],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'filter',
    'loading',
    'placeholder',
    'readonly',
    'required',
    'value',
    'valueState: value-state',
  ],
  outputs: [
    'change: ui5Change',
    'input: ui5Input',
    'selectionChange: ui5SelectionChange',
  ],
})
export class ComboBoxComponent extends GenericControlValueAccessor {
  accessibleName?: ComboBoxComponentElement['accessibleName'];
  accessibleNameRef?: ComboBoxComponentElement['accessibleNameRef'];
  disabled?: ComboBoxComponentElement['disabled'];
  filter?: ComboBoxComponentElement['filter'];
  loading?: ComboBoxComponentElement['loading'];
  placeholder?: ComboBoxComponentElement['placeholder'];
  readonly?: ComboBoxComponentElement['readonly'];
  required?: ComboBoxComponentElement['required'];
  value?: ComboBoxComponentElement['value'];
  valueState?: ComboBoxComponentElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ComboBoxComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get icon(): Array<IconComponent['element']> {
    return this.elementRef.nativeElement.icon;
  }
  get valueStateMessage(): Array<HTMLElement> {
    return this.elementRef.nativeElement.valueStateMessage;
  }
}
export declare interface ComboBoxComponent
  extends Partial<ComboBoxComponentElement> {}
"
`;

exports[`Snapshot test Main Custom List Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/CustomListItem.js';
import type CustomListItem from '@ui5/webcomponents/dist/CustomListItem.js';

interface CustomListItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'detailClick'> {
  detailClick: CustomEvent<void>;
}

export declare interface CustomListItemElement
  extends Partial<
    Omit<
      CustomListItem,
      'detailClick' | 'selected' | 'navigated' | 'type' | 'accessibleName'
    >
  > {
  selected: boolean;
  navigated: boolean;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
  accessibleName: string;
  addEventListener<K extends keyof CustomListItemComponentEventsMap>(
    type: K,
    listener: (
      this: CustomListItemElement,
      ev: CustomListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof CustomListItemComponentEventsMap>(
    type: K,
    listener: (
      this: CustomListItemElement,
      ev: CustomListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'navigated',
  'type',
  'accessibleName',
])
@ProxyOutputs(['detailClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li-custom',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5CustomListItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'navigated',
    'type',
    'accessibleName: accessible-name',
  ],
  outputs: ['detailClick: ui5DetailClick'],
  providers: [],
})
export class CustomListItemComponent {
  selected?: CustomListItemElement['selected'];
  navigated?: CustomListItemElement['navigated'];
  type?: CustomListItemElement['type'];
  accessibleName?: CustomListItemElement['accessibleName'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<CustomListItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): CustomListItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface CustomListItemComponent
  extends Partial<CustomListItemElement> {
  detailClick: EventEmitter<CustomListItemComponentEventsMap['detailClick']>;
}
"
`;

exports[`Snapshot test Main Date Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/DatePicker.js';
import type DatePicker from '@ui5/webcomponents/dist/DatePicker.js';

interface DatePickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<{ value: string; valid: boolean }>;
  input: CustomEvent<{ value: string; valid: boolean }>;
}

export declare interface DatePickerElement
  extends Partial<
    Omit<
      DatePicker,
      | 'change'
      | 'input'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'disabled'
      | 'hideWeekNumbers'
      | 'name'
      | 'placeholder'
      | 'readonly'
      | 'required'
      | 'value'
      | 'valueState'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  accessibleName: string;
  accessibleNameRef: string;

  disabled: boolean;
  hideWeekNumbers: boolean;
  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  addEventListener<K extends keyof DatePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DatePickerElement,
      ev: DatePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DatePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DatePickerElement,
      ev: DatePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'accessibleName',
  'accessibleNameRef',
  'dateValue',
  'disabled',
  'hideWeekNumbers',
  'name',
  'placeholder',
  'readonly',
  'required',
  'value',
  'valueState',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'closePicker',
  'formatValue',
  'isInValidRange',
  'isOpen',
  'isValid',
  'openPicker',
])
@Component({
  selector: 'ui5-date-picker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5DatePicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'dateValue: date-value',
    'disabled',
    'hideWeekNumbers: hide-week-numbers',
    'name',
    'placeholder',
    'readonly',
    'required',
    'value',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => DatePickerComponent),
      multi: true,
    },
  ],
})
export class DatePickerComponent extends GenericControlValueAccessor {
  formatPattern?: DatePickerElement['formatPattern'];
  maxDate?: DatePickerElement['maxDate'];
  minDate?: DatePickerElement['minDate'];
  primaryCalendarType?: DatePickerElement['primaryCalendarType'];
  secondaryCalendarType?: DatePickerElement['secondaryCalendarType'];
  accessibleName?: DatePickerElement['accessibleName'];
  accessibleNameRef?: DatePickerElement['accessibleNameRef'];
  disabled?: DatePickerElement['disabled'];
  hideWeekNumbers?: DatePickerElement['hideWeekNumbers'];
  name?: DatePickerElement['name'];
  placeholder?: DatePickerElement['placeholder'];
  readonly?: DatePickerElement['readonly'];
  required?: DatePickerElement['required'];
  value?: DatePickerElement['value'];
  valueState?: DatePickerElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DatePickerElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): DatePickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DatePickerComponent
  extends Partial<DatePickerElement> {
  change: EventEmitter<DatePickerComponentEventsMap['change']>;
  input: EventEmitter<DatePickerComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Date Range Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/DateRangePicker.js';
import type DateRangePicker from '@ui5/webcomponents/dist/DateRangePicker.js';

interface DateRangePickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<{ value: string; valid: boolean }>;
  input: CustomEvent<{ value: string; valid: boolean }>;
}

export declare interface DateRangePickerElement
  extends Partial<
    Omit<
      DateRangePicker,
      | 'change'
      | 'input'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'disabled'
      | 'hideWeekNumbers'
      | 'name'
      | 'placeholder'
      | 'readonly'
      | 'required'
      | 'value'
      | 'valueState'
      | 'delimiter'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  accessibleName: string;
  accessibleNameRef: string;

  disabled: boolean;
  hideWeekNumbers: boolean;
  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  delimiter: string;

  addEventListener<K extends keyof DateRangePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DateRangePickerElement,
      ev: DateRangePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DateRangePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DateRangePickerElement,
      ev: DateRangePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'accessibleName',
  'accessibleNameRef',
  'dateValue',
  'disabled',
  'hideWeekNumbers',
  'name',
  'placeholder',
  'readonly',
  'required',
  'value',
  'valueState',
  'dateValueUtc',
  'delimiter',
  'endDateValue',
  'startDateValue',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'closePicker',
  'formatValue',
  'isInValidRange',
  'isOpen',
  'isValid',
  'openPicker',
])
@Component({
  selector: 'ui5-daterange-picker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5DateRangePicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'dateValue: date-value',
    'disabled',
    'hideWeekNumbers: hide-week-numbers',
    'name',
    'placeholder',
    'readonly',
    'required',
    'value',
    'valueState: value-state',
    'dateValueUtc: date-value-utc',
    'delimiter',
    'endDateValue: end-date-value',
    'startDateValue: start-date-value',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => DateRangePickerComponent),
      multi: true,
    },
  ],
})
export class DateRangePickerComponent extends GenericControlValueAccessor {
  formatPattern?: DateRangePickerElement['formatPattern'];
  maxDate?: DateRangePickerElement['maxDate'];
  minDate?: DateRangePickerElement['minDate'];
  primaryCalendarType?: DateRangePickerElement['primaryCalendarType'];
  secondaryCalendarType?: DateRangePickerElement['secondaryCalendarType'];
  accessibleName?: DateRangePickerElement['accessibleName'];
  accessibleNameRef?: DateRangePickerElement['accessibleNameRef'];
  disabled?: DateRangePickerElement['disabled'];
  hideWeekNumbers?: DateRangePickerElement['hideWeekNumbers'];
  name?: DateRangePickerElement['name'];
  placeholder?: DateRangePickerElement['placeholder'];
  readonly?: DateRangePickerElement['readonly'];
  required?: DateRangePickerElement['required'];
  value?: DateRangePickerElement['value'];
  valueState?: DateRangePickerElement['valueState'];
  delimiter?: DateRangePickerElement['delimiter'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DateRangePickerElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): DateRangePickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DateRangePickerComponent
  extends Partial<DateRangePickerElement> {
  change: EventEmitter<DateRangePickerComponentEventsMap['change']>;
  input: EventEmitter<DateRangePickerComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Date Time Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/DateTimePicker.js';
import type DateTimePicker from '@ui5/webcomponents/dist/DateTimePicker.js';

interface DateTimePickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<{ value: string; valid: boolean }>;
  input: CustomEvent<{ value: string; valid: boolean }>;
}

export declare interface DateTimePickerElement
  extends Partial<
    Omit<
      DateTimePicker,
      | 'change'
      | 'input'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'disabled'
      | 'hideWeekNumbers'
      | 'name'
      | 'placeholder'
      | 'readonly'
      | 'required'
      | 'value'
      | 'valueState'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  accessibleName: string;
  accessibleNameRef: string;

  disabled: boolean;
  hideWeekNumbers: boolean;
  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  addEventListener<K extends keyof DateTimePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DateTimePickerElement,
      ev: DateTimePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DateTimePickerComponentEventsMap>(
    type: K,
    listener: (
      this: DateTimePickerElement,
      ev: DateTimePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'accessibleName',
  'accessibleNameRef',
  'dateValue',
  'disabled',
  'hideWeekNumbers',
  'name',
  'placeholder',
  'readonly',
  'required',
  'value',
  'valueState',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'closePicker',
  'formatValue',
  'isInValidRange',
  'isOpen',
  'isValid',
  'openPicker',
])
@Component({
  selector: 'ui5-datetime-picker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5DateTimePicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'dateValue: date-value',
    'disabled',
    'hideWeekNumbers: hide-week-numbers',
    'name',
    'placeholder',
    'readonly',
    'required',
    'value',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => DateTimePickerComponent),
      multi: true,
    },
  ],
})
export class DateTimePickerComponent extends GenericControlValueAccessor {
  formatPattern?: DateTimePickerElement['formatPattern'];
  maxDate?: DateTimePickerElement['maxDate'];
  minDate?: DateTimePickerElement['minDate'];
  primaryCalendarType?: DateTimePickerElement['primaryCalendarType'];
  secondaryCalendarType?: DateTimePickerElement['secondaryCalendarType'];
  accessibleName?: DateTimePickerElement['accessibleName'];
  accessibleNameRef?: DateTimePickerElement['accessibleNameRef'];
  disabled?: DateTimePickerElement['disabled'];
  hideWeekNumbers?: DateTimePickerElement['hideWeekNumbers'];
  name?: DateTimePickerElement['name'];
  placeholder?: DateTimePickerElement['placeholder'];
  readonly?: DateTimePickerElement['readonly'];
  required?: DateTimePickerElement['required'];
  value?: DateTimePickerElement['value'];
  valueState?: DateTimePickerElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DateTimePickerElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): DateTimePickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DateTimePickerComponent
  extends Partial<DateTimePickerElement> {
  change: EventEmitter<DateTimePickerComponentEventsMap['change']>;
  input: EventEmitter<DateTimePickerComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Day Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/DayPicker.js';
import type DayPicker from '@ui5/webcomponents/dist/DayPicker.js';

interface DayPickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'navigate'> {
  change: CustomEvent<void>;
  navigate: CustomEvent<void>;
}

export declare interface DayPickerElement
  extends Partial<
    Omit<
      DayPicker,
      | 'change'
      | 'navigate'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
      | 'hideWeekNumbers'
      | 'selectionMode'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  hideWeekNumbers: boolean;

  selectionMode: 'Multiple' | 'Range' | 'Single';
  addEventListener<K extends keyof DayPickerComponentEventsMap>(
    type: K,
    listener: (
      this: DayPickerElement,
      ev: DayPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DayPickerComponentEventsMap>(
    type: K,
    listener: (
      this: DayPickerElement,
      ev: DayPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'hideWeekNumbers',
  'selectedDates',
  'selectionMode',
])
@ProxyOutputs(['change', 'navigate'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  '_safelyModifyTimestampBy',
  '_safelySetTimestamp',
])
@Component({
  selector: 'ui5-daypicker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5DayPicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'hideWeekNumbers: hide-week-numbers',
    'selectedDates: selected-dates',
    'selectionMode: selection-mode',
  ],
  outputs: ['change: ui5Change', 'navigate: ui5Navigate'],
  providers: [],
})
export class DayPickerComponent {
  formatPattern?: DayPickerElement['formatPattern'];
  maxDate?: DayPickerElement['maxDate'];
  minDate?: DayPickerElement['minDate'];
  primaryCalendarType?: DayPickerElement['primaryCalendarType'];
  secondaryCalendarType?: DayPickerElement['secondaryCalendarType'];
  hideWeekNumbers?: DayPickerElement['hideWeekNumbers'];
  selectionMode?: DayPickerElement['selectionMode'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DayPickerElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): DayPickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DayPickerComponent extends Partial<DayPickerElement> {
  change: EventEmitter<DayPickerComponentEventsMap['change']>;
  navigate: EventEmitter<DayPickerComponentEventsMap['navigate']>;
}
"
`;

exports[`Snapshot test Main Dialog should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Dialog.js';
import type Dialog from '@ui5/webcomponents/dist/Dialog.js';

interface DialogComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'afterClose' | 'afterOpen' | 'beforeClose' | 'beforeOpen'
  > {
  afterClose: CustomEvent<void>;
  afterOpen: CustomEvent<void>;
  beforeClose: CustomEvent<{ escPressed: boolean }>;
  beforeOpen: CustomEvent<void>;
}

export declare interface DialogElement
  extends Partial<
    Omit<
      Dialog,
      | 'afterClose'
      | 'afterOpen'
      | 'beforeClose'
      | 'beforeOpen'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'initialFocus'
      | 'open'
      | 'preventFocusRestore'
      | 'draggable'
      | 'headerText'
      | 'resizable'
      | 'state'
      | 'stretch'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  initialFocus: string;
  open: boolean;
  preventFocusRestore: boolean;
  draggable: boolean;
  headerText: string;
  resizable: boolean;
  state: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  stretch: boolean;
  addEventListener<K extends keyof DialogComponentEventsMap>(
    type: K,
    listener: (this: DialogElement, ev: DialogComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof DialogComponentEventsMap>(
    type: K,
    listener: (this: DialogElement, ev: DialogComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'initialFocus',
  'open',
  'preventFocusRestore',
  'draggable',
  'headerText',
  'resizable',
  'state',
  'stretch',
])
@ProxyOutputs(['afterClose', 'afterOpen', 'beforeClose', 'beforeOpen'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'applyFocus',
  'close',
  'isOpen',
  'show',
])
@Component({
  selector: 'ui5-dialog',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Dialog',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'initialFocus: initial-focus',
    'open',
    'preventFocusRestore: prevent-focus-restore',
    'draggable',
    'headerText: header-text',
    'resizable',
    'state',
    'stretch',
  ],
  outputs: [
    'afterClose: ui5AfterClose',
    'afterOpen: ui5AfterOpen',
    'beforeClose: ui5BeforeClose',
    'beforeOpen: ui5BeforeOpen',
  ],
  providers: [],
})
export class DialogComponent {
  accessibleName?: DialogElement['accessibleName'];
  accessibleNameRef?: DialogElement['accessibleNameRef'];
  initialFocus?: DialogElement['initialFocus'];
  open?: DialogElement['open'];
  preventFocusRestore?: DialogElement['preventFocusRestore'];
  draggable?: DialogElement['draggable'];
  headerText?: DialogElement['headerText'];
  resizable?: DialogElement['resizable'];
  state?: DialogElement['state'];
  stretch?: DialogElement['stretch'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<DialogElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): DialogElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface DialogComponent extends Partial<DialogElement> {
  afterClose: EventEmitter<DialogComponentEventsMap['afterClose']>;
  afterOpen: EventEmitter<DialogComponentEventsMap['afterOpen']>;
  beforeClose: EventEmitter<DialogComponentEventsMap['beforeClose']>;
  beforeOpen: EventEmitter<DialogComponentEventsMap['beforeOpen']>;
}
"
`;

exports[`Snapshot test Main File Uploader should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/FileUploader.js';
import type FileUploader from '@ui5/webcomponents/dist/FileUploader.js';

interface FileUploaderComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<{ files: any }>;
}

export declare interface FileUploaderElement
  extends Partial<
    Omit<
      FileUploader,
      | 'change'
      | 'accept'
      | 'disabled'
      | 'hideInput'
      | 'multiple'
      | 'name'
      | 'placeholder'
      | 'value'
      | 'valueState'
    >
  > {
  accept: string;
  disabled: boolean;

  hideInput: boolean;
  multiple: boolean;
  name: string;
  placeholder: string;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  addEventListener<K extends keyof FileUploaderComponentEventsMap>(
    type: K,
    listener: (
      this: FileUploaderElement,
      ev: FileUploaderComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof FileUploaderComponentEventsMap>(
    type: K,
    listener: (
      this: FileUploaderElement,
      ev: FileUploaderComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accept',
  'disabled',
  'files',
  'hideInput',
  'multiple',
  'name',
  'placeholder',
  'value',
  'valueState',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-file-uploader',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5FileUploader',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accept',
    'disabled',
    'files',
    'hideInput: hide-input',
    'multiple',
    'name',
    'placeholder',
    'value',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => FileUploaderComponent),
      multi: true,
    },
  ],
})
export class FileUploaderComponent extends GenericControlValueAccessor {
  accept?: FileUploaderElement['accept'];
  disabled?: FileUploaderElement['disabled'];
  hideInput?: FileUploaderElement['hideInput'];
  multiple?: FileUploaderElement['multiple'];
  name?: FileUploaderElement['name'];
  placeholder?: FileUploaderElement['placeholder'];
  value?: FileUploaderElement['value'];
  valueState?: FileUploaderElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<FileUploaderElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): FileUploaderElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface FileUploaderComponent
  extends Partial<FileUploaderElement> {
  change: EventEmitter<FileUploaderComponentEventsMap['change']>;
}
"
`;

exports[`Snapshot test Main Group Header List Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/GroupHeaderListItem.js';
import type GroupHeaderListItem from '@ui5/webcomponents/dist/GroupHeaderListItem.js';

export declare interface GroupHeaderListItemElement
  extends Partial<Omit<GroupHeaderListItem, 'selected' | 'accessibleName'>> {
  selected: boolean;
  accessibleName: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'selected', 'accessibleName'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li-groupheader',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5GroupHeaderListItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'accessibleName: accessible-name',
  ],
  outputs: [],
  providers: [],
})
export class GroupHeaderListItemComponent {
  selected?: GroupHeaderListItemElement['selected'];
  accessibleName?: GroupHeaderListItemElement['accessibleName'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<GroupHeaderListItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): GroupHeaderListItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface GroupHeaderListItemComponent
  extends Partial<GroupHeaderListItemElement> {}
"
`;

exports[`Snapshot test Main Icon should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Icon.js';
import type Icon from '@ui5/webcomponents/dist/Icon.js';

export declare interface IconElement
  extends Partial<
    Omit<
      Icon,
      | 'accessibleName'
      | 'accessibleRole'
      | 'design'
      | 'interactive'
      | 'name'
      | 'showTooltip'
    >
  > {
  accessibleName: string;
  accessibleRole: string;
  design:
    | 'Contrast'
    | 'Critical'
    | 'Default'
    | 'Information'
    | 'Negative'
    | 'Neutral'
    | 'NonInteractive'
    | 'Positive';
  interactive: boolean;
  name: string;
  showTooltip: boolean;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleRole',
  'design',
  'interactive',
  'name',
  'showTooltip',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-icon',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Icon',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleRole: accessible-role',
    'design',
    'interactive',
    'name',
    'showTooltip: show-tooltip',
  ],
  outputs: [],
  providers: [],
})
export class IconComponent {
  accessibleName?: IconElement['accessibleName'];
  accessibleRole?: IconElement['accessibleRole'];
  design?: IconElement['design'];
  interactive?: IconElement['interactive'];
  name?: IconElement['name'];
  showTooltip?: IconElement['showTooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<IconElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): IconElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface IconComponent extends Partial<IconElement> {}
"
`;

exports[`Snapshot test Main Index Ts should match the snapshot 1`] = `
"export { Ui5MainModule } from './ui5-main.module';
"
`;

exports[`Snapshot test Main Input should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/Input.js';
import type Input from '@ui5/webcomponents/dist/Input.js';

interface InputComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'change' | 'input' | 'suggestionItemPreview' | 'suggestionItemSelect'
  > {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
  suggestionItemPreview: CustomEvent<{
    item: HTMLElement;
    targetRef: HTMLElement;
  }>;
  suggestionItemSelect: CustomEvent<{ item: HTMLElement }>;
}

export declare interface InputElement
  extends Partial<
    Omit<
      Input,
      | 'change'
      | 'input'
      | 'suggestionItemPreview'
      | 'suggestionItemSelect'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'disabled'
      | 'name'
      | 'noTypeahead'
      | 'placeholder'
      | 'readonly'
      | 'required'
      | 'showClearIcon'
      | 'showSuggestions'
      | 'type'
      | 'value'
      | 'valueState'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;

  name: string;
  noTypeahead: boolean;
  placeholder: string;

  readonly: boolean;
  required: boolean;
  showClearIcon: boolean;
  showSuggestions: boolean;
  type: 'Email' | 'Number' | 'Password' | 'Tel' | 'Text' | 'URL';
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  addEventListener<K extends keyof InputComponentEventsMap>(
    type: K,
    listener: (this: InputElement, ev: InputComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof InputComponentEventsMap>(
    type: K,
    listener: (this: InputElement, ev: InputComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'maxlength',
  'name',
  'noTypeahead',
  'placeholder',
  'previewItem',
  'readonly',
  'required',
  'showClearIcon',
  'showSuggestions',
  'type',
  'value',
  'valueState',
])
@ProxyOutputs([
  'change',
  'input',
  'suggestionItemPreview',
  'suggestionItemSelect',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'openPicker',
])
@Component({
  selector: 'ui5-input',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Input',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'maxlength',
    'name',
    'noTypeahead: no-typeahead',
    'placeholder',
    'previewItem: preview-item',
    'readonly',
    'required',
    'showClearIcon: show-clear-icon',
    'showSuggestions: show-suggestions',
    'type',
    'value',
    'valueState: value-state',
  ],
  outputs: [
    'change: ui5Change',
    'input: ui5Input',
    'suggestionItemPreview: ui5SuggestionItemPreview',
    'suggestionItemSelect: ui5SuggestionItemSelect',
  ],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => InputComponent),
      multi: true,
    },
  ],
})
export class InputComponent extends GenericControlValueAccessor {
  accessibleName?: InputElement['accessibleName'];
  accessibleNameRef?: InputElement['accessibleNameRef'];
  disabled?: InputElement['disabled'];
  name?: InputElement['name'];
  noTypeahead?: InputElement['noTypeahead'];
  placeholder?: InputElement['placeholder'];
  readonly?: InputElement['readonly'];
  required?: InputElement['required'];
  showClearIcon?: InputElement['showClearIcon'];
  showSuggestions?: InputElement['showSuggestions'];
  type?: InputElement['type'];
  value?: InputElement['value'];
  valueState?: InputElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<InputElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): InputElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface InputComponent extends Partial<InputElement> {
  change: EventEmitter<InputComponentEventsMap['change']>;
  input: EventEmitter<InputComponentEventsMap['input']>;
  suggestionItemPreview: EventEmitter<
    InputComponentEventsMap['suggestionItemPreview']
  >;
  suggestionItemSelect: EventEmitter<
    InputComponentEventsMap['suggestionItemSelect']
  >;
}
"
`;

exports[`Snapshot test Main Label should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Label.js';
import type Label from '@ui5/webcomponents/dist/Label.js';

export declare interface LabelElement
  extends Partial<
    Omit<Label, 'for' | 'required' | 'showColon' | 'wrappingType'>
  > {
  for: string;
  required: boolean;
  showColon: boolean;
  wrappingType: 'None' | 'Normal';
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'for',
  'required',
  'showColon',
  'wrappingType',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-label',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Label',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'for',
    'required',
    'showColon: show-colon',
    'wrappingType: wrapping-type',
  ],
  outputs: [],
  providers: [],
})
export class LabelComponent {
  for?: LabelElement['for'];
  required?: LabelElement['required'];
  showColon?: LabelElement['showColon'];
  wrappingType?: LabelElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<LabelElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): LabelElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface LabelComponent extends Partial<LabelElement> {}
"
`;

exports[`Snapshot test Main Link should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Link.js';
import type Link from '@ui5/webcomponents/dist/Link.js';

interface LinkComponentEventsMap extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<{
    altKey: boolean;
    ctrlKey: boolean;
    metaKey: boolean;
    shiftKey: boolean;
  }>;
}

export declare interface LinkElement
  extends Partial<
    Omit<
      Link,
      | 'click'
      | 'accessibilityAttributes'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'accessibleRole'
      | 'design'
      | 'disabled'
      | 'href'
      | 'target'
      | 'wrappingType'
    >
  > {
  accessibilityAttributes: {
    expanded?: boolean;
    hasPopup?: 'Dialog' | 'Grid' | 'Listbox' | 'Menu' | 'Tree';
  };
  accessibleName: string;
  accessibleNameRef: string;
  accessibleRole: string;
  design: 'Default' | 'Emphasized' | 'Subtle';
  disabled: boolean;
  href: string;
  target: string;
  wrappingType: 'None' | 'Normal';
  addEventListener<K extends keyof LinkComponentEventsMap>(
    type: K,
    listener: (this: LinkElement, ev: LinkComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof LinkComponentEventsMap>(
    type: K,
    listener: (this: LinkElement, ev: LinkComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityAttributes',
  'accessibleName',
  'accessibleNameRef',
  'accessibleRole',
  'design',
  'disabled',
  'href',
  'target',
  'wrappingType',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-link',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Link',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityAttributes: accessibility-attributes',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'accessibleRole: accessible-role',
    'design',
    'disabled',
    'href',
    'target',
    'wrappingType: wrapping-type',
  ],
  outputs: ['click: ui5Click'],
  providers: [],
})
export class LinkComponent {
  accessibilityAttributes?: LinkElement['accessibilityAttributes'];
  accessibleName?: LinkElement['accessibleName'];
  accessibleNameRef?: LinkElement['accessibleNameRef'];
  accessibleRole?: LinkElement['accessibleRole'];
  design?: LinkElement['design'];
  disabled?: LinkElement['disabled'];
  href?: LinkElement['href'];
  target?: LinkElement['target'];
  wrappingType?: LinkElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<LinkElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): LinkElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface LinkComponent extends Partial<LinkElement> {
  click: EventEmitter<LinkComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Main List should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/List.js';
import type List from '@ui5/webcomponents/dist/List.js';

interface ListComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    | 'itemClick'
    | 'itemClose'
    | 'itemDelete'
    | 'itemToggle'
    | 'loadMore'
    | 'selectionChange'
  > {
  itemClick: CustomEvent<{ item: HTMLElement }>;
  itemClose: CustomEvent<{ item: HTMLElement }>;
  itemDelete: CustomEvent<{ item: HTMLElement }>;
  itemToggle: CustomEvent<{ item: HTMLElement }>;
  loadMore: CustomEvent<void>;
  selectionChange: CustomEvent<{
    selectedItems: Array<any>;
    previouslySelectedItems: Array<any>;
  }>;
}

export declare interface ListElement
  extends Partial<
    Omit<
      List,
      | 'itemClick'
      | 'itemClose'
      | 'itemDelete'
      | 'itemToggle'
      | 'loadMore'
      | 'selectionChange'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'accessibleRole'
      | 'busy'
      | 'footerText'
      | 'growing'
      | 'headerText'
      | 'indent'
      | 'mode'
      | 'noDataText'
      | 'separators'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  accessibleRole: string;
  busy: boolean;

  footerText: string;
  growing: 'Button' | 'None' | 'Scroll';
  headerText: string;
  indent: boolean;
  mode:
    | 'Delete'
    | 'MultiSelect'
    | 'None'
    | 'SingleSelect'
    | 'SingleSelectAuto'
    | 'SingleSelectBegin'
    | 'SingleSelectEnd';
  noDataText: string;
  separators: 'All' | 'Inner' | 'None';
  addEventListener<K extends keyof ListComponentEventsMap>(
    type: K,
    listener: (this: ListElement, ev: ListComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ListComponentEventsMap>(
    type: K,
    listener: (this: ListElement, ev: ListComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'accessibleRole',
  'busy',
  'busyDelay',
  'footerText',
  'growing',
  'headerText',
  'indent',
  'mode',
  'noDataText',
  'separators',
])
@ProxyOutputs([
  'itemClick',
  'itemClose',
  'itemDelete',
  'itemToggle',
  'loadMore',
  'selectionChange',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-list',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5List',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'accessibleRole: accessible-role',
    'busy',
    'busyDelay: busy-delay',
    'footerText: footer-text',
    'growing',
    'headerText: header-text',
    'indent',
    'mode',
    'noDataText: no-data-text',
    'separators',
  ],
  outputs: [
    'itemClick: ui5ItemClick',
    'itemClose: ui5ItemClose',
    'itemDelete: ui5ItemDelete',
    'itemToggle: ui5ItemToggle',
    'loadMore: ui5LoadMore',
    'selectionChange: ui5SelectionChange',
  ],
  providers: [],
})
export class ListComponent {
  accessibleName?: ListElement['accessibleName'];
  accessibleNameRef?: ListElement['accessibleNameRef'];
  accessibleRole?: ListElement['accessibleRole'];
  busy?: ListElement['busy'];
  footerText?: ListElement['footerText'];
  growing?: ListElement['growing'];
  headerText?: ListElement['headerText'];
  indent?: ListElement['indent'];
  mode?: ListElement['mode'];
  noDataText?: ListElement['noDataText'];
  separators?: ListElement['separators'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ListElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ListElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ListComponent extends Partial<ListElement> {
  itemClick: EventEmitter<ListComponentEventsMap['itemClick']>;
  itemClose: EventEmitter<ListComponentEventsMap['itemClose']>;
  itemDelete: EventEmitter<ListComponentEventsMap['itemDelete']>;
  itemToggle: EventEmitter<ListComponentEventsMap['itemToggle']>;
  loadMore: EventEmitter<ListComponentEventsMap['loadMore']>;
  selectionChange: EventEmitter<ListComponentEventsMap['selectionChange']>;
}
"
`;

exports[`Snapshot test Main Menu Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/MenuItem.js';
import type MenuItem from '@ui5/webcomponents/dist/MenuItem.js';

export declare interface MenuItemElement
  extends Partial<
    Omit<
      MenuItem,
      | 'accessibleName'
      | 'additionalText'
      | 'disabled'
      | 'icon'
      | 'startsSection'
      | 'text'
    >
  > {
  accessibleName: string;
  additionalText: string;
  disabled: boolean;
  icon: string;
  startsSection: boolean;
  text: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'additionalText',
  'disabled',
  'icon',
  'startsSection',
  'text',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-menu-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5MenuItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'additionalText: additional-text',
    'disabled',
    'icon',
    'startsSection: starts-section',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class MenuItemComponent {
  accessibleName?: MenuItemElement['accessibleName'];
  additionalText?: MenuItemElement['additionalText'];
  disabled?: MenuItemElement['disabled'];
  icon?: MenuItemElement['icon'];
  startsSection?: MenuItemElement['startsSection'];
  text?: MenuItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MenuItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MenuItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MenuItemComponent extends Partial<MenuItemElement> {}
"
`;

exports[`Snapshot test Main Menu should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Menu.js';
import type Menu from '@ui5/webcomponents/dist/Menu.js';

interface MenuComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'afterClose' | 'afterOpen' | 'beforeClose' | 'beforeOpen' | 'itemClick'
  > {
  afterClose: CustomEvent<void>;
  afterOpen: CustomEvent<void>;
  beforeClose: CustomEvent<{ escPressed: boolean }>;
  beforeOpen: CustomEvent<void>;
  itemClick: CustomEvent<{ item: Record<string, any>; text: string }>;
}

export declare interface MenuElement
  extends Partial<
    Omit<
      Menu,
      | 'afterClose'
      | 'afterOpen'
      | 'beforeClose'
      | 'beforeOpen'
      | 'itemClick'
      | 'headerText'
      | 'open'
    >
  > {
  headerText: string;
  open: boolean;

  addEventListener<K extends keyof MenuComponentEventsMap>(
    type: K,
    listener: (this: MenuElement, ev: MenuComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MenuComponentEventsMap>(
    type: K,
    listener: (this: MenuElement, ev: MenuComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'headerText', 'open', 'opener'])
@ProxyOutputs([
  'afterClose',
  'afterOpen',
  'beforeClose',
  'beforeOpen',
  'itemClick',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'close',
  'showAt',
])
@Component({
  selector: 'ui5-menu',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Menu',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'headerText: header-text',
    'open',
    'opener',
  ],
  outputs: [
    'afterClose: ui5AfterClose',
    'afterOpen: ui5AfterOpen',
    'beforeClose: ui5BeforeClose',
    'beforeOpen: ui5BeforeOpen',
    'itemClick: ui5ItemClick',
  ],
  providers: [],
})
export class MenuComponent {
  headerText?: MenuElement['headerText'];
  open?: MenuElement['open'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MenuElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MenuElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MenuComponent extends Partial<MenuElement> {
  afterClose: EventEmitter<MenuComponentEventsMap['afterClose']>;
  afterOpen: EventEmitter<MenuComponentEventsMap['afterOpen']>;
  beforeClose: EventEmitter<MenuComponentEventsMap['beforeClose']>;
  beforeOpen: EventEmitter<MenuComponentEventsMap['beforeOpen']>;
  itemClick: EventEmitter<MenuComponentEventsMap['itemClick']>;
}
"
`;

exports[`Snapshot test Main Message Strip should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/MessageStrip.js';
import type MessageStrip from '@ui5/webcomponents/dist/MessageStrip.js';

interface MessageStripComponentEventsMap
  extends Omit<HTMLElementEventMap, 'close'> {
  close: CustomEvent<void>;
}

export declare interface MessageStripElement
  extends Partial<
    Omit<MessageStrip, 'close' | 'design' | 'hideCloseButton' | 'hideIcon'>
  > {
  design: 'Information' | 'Negative' | 'Positive' | 'Warning';
  hideCloseButton: boolean;
  hideIcon: boolean;
  addEventListener<K extends keyof MessageStripComponentEventsMap>(
    type: K,
    listener: (
      this: MessageStripElement,
      ev: MessageStripComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MessageStripComponentEventsMap>(
    type: K,
    listener: (
      this: MessageStripElement,
      ev: MessageStripComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'design',
  'hideCloseButton',
  'hideIcon',
])
@ProxyOutputs(['close'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-message-strip',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5MessageStrip',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'design',
    'hideCloseButton: hide-close-button',
    'hideIcon: hide-icon',
  ],
  outputs: ['close: ui5Close'],
  providers: [],
})
export class MessageStripComponent {
  design?: MessageStripElement['design'];
  hideCloseButton?: MessageStripElement['hideCloseButton'];
  hideIcon?: MessageStripElement['hideIcon'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MessageStripElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MessageStripElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MessageStripComponent
  extends Partial<MessageStripElement> {
  close: EventEmitter<MessageStripComponentEventsMap['close']>;
}
"
`;

exports[`Snapshot test Main Month Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/MonthPicker.js';
import type MonthPicker from '@ui5/webcomponents/dist/MonthPicker.js';

interface MonthPickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'navigate'> {
  change: CustomEvent<void>;
  navigate: CustomEvent<void>;
}

export declare interface MonthPickerElement
  extends Partial<
    Omit<
      MonthPicker,
      | 'change'
      | 'navigate'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';

  addEventListener<K extends keyof MonthPickerComponentEventsMap>(
    type: K,
    listener: (
      this: MonthPickerElement,
      ev: MonthPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MonthPickerComponentEventsMap>(
    type: K,
    listener: (
      this: MonthPickerElement,
      ev: MonthPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'selectedDates',
])
@ProxyOutputs(['change', 'navigate'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  '_safelyModifyTimestampBy',
  '_safelySetTimestamp',
])
@Component({
  selector: 'ui5-monthpicker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5MonthPicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'selectedDates: selected-dates',
  ],
  outputs: ['change: ui5Change', 'navigate: ui5Navigate'],
  providers: [],
})
export class MonthPickerComponent {
  formatPattern?: MonthPickerElement['formatPattern'];
  maxDate?: MonthPickerElement['maxDate'];
  minDate?: MonthPickerElement['minDate'];
  primaryCalendarType?: MonthPickerElement['primaryCalendarType'];
  secondaryCalendarType?: MonthPickerElement['secondaryCalendarType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MonthPickerElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): MonthPickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface MonthPickerComponent
  extends Partial<MonthPickerElement> {
  change: EventEmitter<MonthPickerComponentEventsMap['change']>;
  navigate: EventEmitter<MonthPickerComponentEventsMap['navigate']>;
}
"
`;

exports[`Snapshot test Main Multi Combo Box Group Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/MultiComboBoxGroupItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface MultiComboBoxGroupItemComponentElement
  extends Omit<HTMLElement, 'effectiveDir' | 'isUi5Element' | 'text'> {
  effectiveDir: any;
  isUi5Element: any;
  text: string;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-mcb-group-item',
  exportAs: 'ui5McbGroupItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'text',
  ],
  outputs: [],
})
export class MultiComboBoxGroupItemComponent {
  text?: MultiComboBoxGroupItemComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MultiComboBoxGroupItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface MultiComboBoxGroupItemComponent
  extends Partial<MultiComboBoxGroupItemComponentElement> {}
"
`;

exports[`Snapshot test Main Multi Combo Box Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/MultiComboBoxItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface MultiComboBoxItemComponentElement
  extends Omit<
    HTMLElement,
    'effectiveDir' | 'isUi5Element' | 'additionalText' | 'text' | 'selected'
  > {
  effectiveDir: any;
  isUi5Element: any;
  additionalText: string;
  text: string;
  selected: boolean;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'additionalText',
  'text',
  'selected',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-mcb-item',
  exportAs: 'ui5McbItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'text',
    'selected',
  ],
  outputs: [],
})
export class MultiComboBoxItemComponent {
  additionalText?: MultiComboBoxItemComponentElement['additionalText'];
  text?: MultiComboBoxItemComponentElement['text'];
  selected?: MultiComboBoxItemComponentElement['selected'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MultiComboBoxItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface MultiComboBoxItemComponent
  extends Partial<MultiComboBoxItemComponentElement> {}
"
`;

exports[`Snapshot test Main Multi Combo Box should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  forwardRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/MultiComboBox.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { Observable, fromEvent, merge } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import { IconComponent } from '@ui5/webcomponents-ngx/main/icon';

interface MultiComboBoxComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'change' | 'input' | 'openChange' | 'selectionChange'
  > {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
  openChange: CustomEvent<void>;
  selectionChange: CustomEvent<{ items: Array<any> }>;
}

interface MultiComboBoxComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'allowCustomValues'
    | 'disabled'
    | 'filter'
    | 'noTypeahead'
    | 'open'
    | 'placeholder'
    | 'readonly'
    | 'required'
    | 'value'
    | 'valueState'
    | 'change'
    | 'input'
    | 'openChange'
    | 'selectionChange'
    | 'icon'
    | 'valueStateMessage'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  allowCustomValues: boolean;
  disabled: boolean;
  filter: string;
  noTypeahead: boolean;
  open: boolean;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  icon: Array<IconComponent['element']>;
  valueStateMessage: Array<HTMLElement>;

  addEventListener<K extends keyof MultiComboBoxComponentEventsMap>(
    type: K,
    listener: (
      this: MultiComboBoxComponentElement,
      ev: MultiComboBoxComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MultiComboBoxComponentEventsMap>(
    type: K,
    listener: (
      this: MultiComboBoxComponentElement,
      ev: MultiComboBoxComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'allowCustomValues',
  'disabled',
  'filter',
  'noTypeahead',
  'open',
  'placeholder',
  'readonly',
  'required',
  'value',
  'valueState',
])
@ProxyOutputs(['change', 'input', 'openChange', 'selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-multi-combobox',
  exportAs: 'ui5MultiCombobox',
  standalone: true,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => MultiComboBoxComponent),
      multi: true,
    },
  ],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'allowCustomValues: allow-custom-values',
    'disabled',
    'filter',
    'noTypeahead: no-typeahead',
    'open',
    'placeholder',
    'readonly',
    'required',
    'value',
    'valueState: value-state',
  ],
  outputs: [
    'change: ui5Change',
    'input: ui5Input',
    'openChange: ui5OpenChange',
    'selectionChange: ui5SelectionChange',
  ],
})
export class MultiComboBoxComponent extends GenericControlValueAccessor {
  accessibleName?: MultiComboBoxComponentElement['accessibleName'];
  accessibleNameRef?: MultiComboBoxComponentElement['accessibleNameRef'];
  allowCustomValues?: MultiComboBoxComponentElement['allowCustomValues'];
  disabled?: MultiComboBoxComponentElement['disabled'];
  filter?: MultiComboBoxComponentElement['filter'];
  noTypeahead?: MultiComboBoxComponentElement['noTypeahead'];
  open?: MultiComboBoxComponentElement['open'];
  placeholder?: MultiComboBoxComponentElement['placeholder'];
  readonly?: MultiComboBoxComponentElement['readonly'];
  required?: MultiComboBoxComponentElement['required'];
  value?: MultiComboBoxComponentElement['value'];
  valueState?: MultiComboBoxComponentElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MultiComboBoxComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get icon(): Array<IconComponent['element']> {
    return this.elementRef.nativeElement.icon;
  }
  get valueStateMessage(): Array<HTMLElement> {
    return this.elementRef.nativeElement.valueStateMessage;
  }
}
export declare interface MultiComboBoxComponent
  extends Partial<MultiComboBoxComponentElement> {}
"
`;

exports[`Snapshot test Main Multi Input should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  forwardRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/MultiInput.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { Observable, fromEvent, merge } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import { IconComponent } from '@ui5/webcomponents-ngx/main/icon';
import { TokenComponent } from '@ui5/webcomponents-ngx/main/token';

interface MultiInputComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    | 'change'
    | 'input'
    | 'suggestionItemPreview'
    | 'suggestionItemSelect'
    | 'tokenDelete'
    | 'valueHelpTrigger'
  > {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
  suggestionItemPreview: CustomEvent<{
    item: HTMLElement;
    targetRef: HTMLElement;
  }>;
  suggestionItemSelect: CustomEvent<{ item: HTMLElement }>;
  tokenDelete: CustomEvent<{ token: HTMLElement }>;
  valueHelpTrigger: CustomEvent<void>;
}

interface MultiInputComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'disabled'
    | 'maxlength'
    | 'name'
    | 'noTypeahead'
    | 'placeholder'
    | 'previewItem'
    | 'readonly'
    | 'required'
    | 'showClearIcon'
    | 'showSuggestions'
    | 'type'
    | 'value'
    | 'valueState'
    | 'showValueHelpIcon'
    | 'change'
    | 'input'
    | 'suggestionItemPreview'
    | 'suggestionItemSelect'
    | 'tokenDelete'
    | 'valueHelpTrigger'
    | 'icon'
    | 'valueStateMessage'
    | 'tokens'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;
  maxlength: any;
  name: string;
  noTypeahead: boolean;
  placeholder: string;
  previewItem: any;
  readonly: boolean;
  required: boolean;
  showClearIcon: boolean;
  showSuggestions: boolean;
  type: 'Email' | 'Number' | 'Password' | 'Tel' | 'Text' | 'URL';
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  showValueHelpIcon: boolean;

  icon: Array<IconComponent['element']>;
  valueStateMessage: Array<HTMLElement>;
  tokens: Array<TokenComponent['element']>;

  addEventListener<K extends keyof MultiInputComponentEventsMap>(
    type: K,
    listener: (
      this: MultiInputComponentElement,
      ev: MultiInputComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof MultiInputComponentEventsMap>(
    type: K,
    listener: (
      this: MultiInputComponentElement,
      ev: MultiInputComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  openPicker(): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'maxlength',
  'name',
  'noTypeahead',
  'placeholder',
  'previewItem',
  'readonly',
  'required',
  'showClearIcon',
  'showSuggestions',
  'type',
  'value',
  'valueState',
  'showValueHelpIcon',
])
@ProxyOutputs([
  'change',
  'input',
  'suggestionItemPreview',
  'suggestionItemSelect',
  'tokenDelete',
  'valueHelpTrigger',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'openPicker',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-multi-input',
  exportAs: 'ui5MultiInput',
  standalone: true,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => MultiInputComponent),
      multi: true,
    },
  ],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'maxlength',
    'name',
    'noTypeahead: no-typeahead',
    'placeholder',
    'previewItem: preview-item',
    'readonly',
    'required',
    'showClearIcon: show-clear-icon',
    'showSuggestions: show-suggestions',
    'type',
    'value',
    'valueState: value-state',
    'showValueHelpIcon: show-value-help-icon',
  ],
  outputs: [
    'change: ui5Change',
    'input: ui5Input',
    'suggestionItemPreview: ui5SuggestionItemPreview',
    'suggestionItemSelect: ui5SuggestionItemSelect',
    'tokenDelete: ui5TokenDelete',
    'valueHelpTrigger: ui5ValueHelpTrigger',
  ],
})
export class MultiInputComponent extends GenericControlValueAccessor {
  accessibleName?: MultiInputComponentElement['accessibleName'];
  accessibleNameRef?: MultiInputComponentElement['accessibleNameRef'];
  disabled?: MultiInputComponentElement['disabled'];
  name?: MultiInputComponentElement['name'];
  noTypeahead?: MultiInputComponentElement['noTypeahead'];
  placeholder?: MultiInputComponentElement['placeholder'];
  readonly?: MultiInputComponentElement['readonly'];
  required?: MultiInputComponentElement['required'];
  showClearIcon?: MultiInputComponentElement['showClearIcon'];
  showSuggestions?: MultiInputComponentElement['showSuggestions'];
  type?: MultiInputComponentElement['type'];
  value?: MultiInputComponentElement['value'];
  valueState?: MultiInputComponentElement['valueState'];
  showValueHelpIcon?: MultiInputComponentElement['showValueHelpIcon'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<MultiInputComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get icon(): Array<IconComponent['element']> {
    return this.elementRef.nativeElement.icon;
  }
  get valueStateMessage(): Array<HTMLElement> {
    return this.elementRef.nativeElement.valueStateMessage;
  }
  get tokens(): Array<TokenComponent['element']> {
    return this.elementRef.nativeElement.tokens;
  }
}
export declare interface MultiInputComponent
  extends Partial<MultiInputComponentElement> {}
"
`;

exports[`Snapshot test Main Ng Package Json should match the snapshot 1`] = `
"{ \\"lib\\": { \\"entryFile\\": \\"./index.ts\\" } }
"
`;

exports[`Snapshot test Main Option should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Option.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface OptionComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'additionalText'
    | 'disabled'
    | 'icon'
    | 'selected'
    | 'value'
  > {
  effectiveDir: any;
  isUi5Element: any;
  additionalText: string;
  disabled: boolean;
  icon: string;
  selected: boolean;
  value: string;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'additionalText',
  'disabled',
  'icon',
  'selected',
  'value',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-option',
  exportAs: 'ui5Option',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'disabled',
    'icon',
    'selected',
    'value',
  ],
  outputs: [],
})
export class OptionComponent {
  additionalText?: OptionComponentElement['additionalText'];
  disabled?: OptionComponentElement['disabled'];
  icon?: OptionComponentElement['icon'];
  selected?: OptionComponentElement['selected'];
  value?: OptionComponentElement['value'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<OptionComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface OptionComponent
  extends Partial<OptionComponentElement> {}
"
`;

exports[`Snapshot test Main Panel should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Panel.js';
import type Panel from '@ui5/webcomponents/dist/Panel.js';

interface PanelComponentEventsMap extends Omit<HTMLElementEventMap, 'toggle'> {
  toggle: CustomEvent<void>;
}

export declare interface PanelElement
  extends Partial<
    Omit<
      Panel,
      | 'toggle'
      | 'accessibleName'
      | 'accessibleRole'
      | 'collapsed'
      | 'fixed'
      | 'headerLevel'
      | 'headerText'
      | 'noAnimation'
    >
  > {
  accessibleName: string;
  accessibleRole: 'Complementary' | 'Form' | 'Region';
  collapsed: boolean;
  fixed: boolean;
  headerLevel: 'H1' | 'H2' | 'H3' | 'H4' | 'H5' | 'H6';
  headerText: string;
  noAnimation: boolean;
  addEventListener<K extends keyof PanelComponentEventsMap>(
    type: K,
    listener: (this: PanelElement, ev: PanelComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof PanelComponentEventsMap>(
    type: K,
    listener: (this: PanelElement, ev: PanelComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleRole',
  'collapsed',
  'fixed',
  'headerLevel',
  'headerText',
  'noAnimation',
])
@ProxyOutputs(['toggle'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-panel',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Panel',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleRole: accessible-role',
    'collapsed',
    'fixed',
    'headerLevel: header-level',
    'headerText: header-text',
    'noAnimation: no-animation',
  ],
  outputs: ['toggle: ui5Toggle'],
  providers: [],
})
export class PanelComponent {
  accessibleName?: PanelElement['accessibleName'];
  accessibleRole?: PanelElement['accessibleRole'];
  collapsed?: PanelElement['collapsed'];
  fixed?: PanelElement['fixed'];
  headerLevel?: PanelElement['headerLevel'];
  headerText?: PanelElement['headerText'];
  noAnimation?: PanelElement['noAnimation'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<PanelElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): PanelElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface PanelComponent extends Partial<PanelElement> {
  toggle: EventEmitter<PanelComponentEventsMap['toggle']>;
}
"
`;

exports[`Snapshot test Main Popover should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Popover.js';
import type Popover from '@ui5/webcomponents/dist/Popover.js';

interface PopoverComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'afterClose' | 'afterOpen' | 'beforeClose' | 'beforeOpen'
  > {
  afterClose: CustomEvent<void>;
  afterOpen: CustomEvent<void>;
  beforeClose: CustomEvent<{ escPressed: boolean }>;
  beforeOpen: CustomEvent<void>;
}

export declare interface PopoverElement
  extends Partial<
    Omit<
      Popover,
      | 'afterClose'
      | 'afterOpen'
      | 'beforeClose'
      | 'beforeOpen'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'initialFocus'
      | 'open'
      | 'preventFocusRestore'
      | 'allowTargetOverlap'
      | 'headerText'
      | 'hideArrow'
      | 'hideBackdrop'
      | 'horizontalAlign'
      | 'modal'
      | 'placementType'
      | 'verticalAlign'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  initialFocus: string;
  open: boolean;
  preventFocusRestore: boolean;
  allowTargetOverlap: boolean;
  headerText: string;
  hideArrow: boolean;
  hideBackdrop: boolean;
  horizontalAlign: 'Center' | 'Left' | 'Right' | 'Stretch';
  modal: boolean;

  placementType: 'Bottom' | 'Left' | 'Right' | 'Top';
  verticalAlign: 'Bottom' | 'Center' | 'Stretch' | 'Top';
  addEventListener<K extends keyof PopoverComponentEventsMap>(
    type: K,
    listener: (this: PopoverElement, ev: PopoverComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof PopoverComponentEventsMap>(
    type: K,
    listener: (this: PopoverElement, ev: PopoverComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'initialFocus',
  'open',
  'preventFocusRestore',
  'allowTargetOverlap',
  'headerText',
  'hideArrow',
  'hideBackdrop',
  'horizontalAlign',
  'modal',
  'opener',
  'placementType',
  'verticalAlign',
])
@ProxyOutputs(['afterClose', 'afterOpen', 'beforeClose', 'beforeOpen'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'applyFocus',
  'close',
  'isOpen',
  'showAt',
])
@Component({
  selector: 'ui5-popover',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Popover',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'initialFocus: initial-focus',
    'open',
    'preventFocusRestore: prevent-focus-restore',
    'allowTargetOverlap: allow-target-overlap',
    'headerText: header-text',
    'hideArrow: hide-arrow',
    'hideBackdrop: hide-backdrop',
    'horizontalAlign: horizontal-align',
    'modal',
    'opener',
    'placementType: placement-type',
    'verticalAlign: vertical-align',
  ],
  outputs: [
    'afterClose: ui5AfterClose',
    'afterOpen: ui5AfterOpen',
    'beforeClose: ui5BeforeClose',
    'beforeOpen: ui5BeforeOpen',
  ],
  providers: [],
})
export class PopoverComponent {
  accessibleName?: PopoverElement['accessibleName'];
  accessibleNameRef?: PopoverElement['accessibleNameRef'];
  initialFocus?: PopoverElement['initialFocus'];
  open?: PopoverElement['open'];
  preventFocusRestore?: PopoverElement['preventFocusRestore'];
  allowTargetOverlap?: PopoverElement['allowTargetOverlap'];
  headerText?: PopoverElement['headerText'];
  hideArrow?: PopoverElement['hideArrow'];
  hideBackdrop?: PopoverElement['hideBackdrop'];
  horizontalAlign?: PopoverElement['horizontalAlign'];
  modal?: PopoverElement['modal'];
  placementType?: PopoverElement['placementType'];
  verticalAlign?: PopoverElement['verticalAlign'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<PopoverElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): PopoverElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface PopoverComponent extends Partial<PopoverElement> {
  afterClose: EventEmitter<PopoverComponentEventsMap['afterClose']>;
  afterOpen: EventEmitter<PopoverComponentEventsMap['afterOpen']>;
  beforeClose: EventEmitter<PopoverComponentEventsMap['beforeClose']>;
  beforeOpen: EventEmitter<PopoverComponentEventsMap['beforeOpen']>;
}
"
`;

exports[`Snapshot test Main Progress Indicator should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ProgressIndicator.js';
import type ProgressIndicator from '@ui5/webcomponents/dist/ProgressIndicator.js';

export declare interface ProgressIndicatorElement
  extends Partial<
    Omit<
      ProgressIndicator,
      'disabled' | 'displayValue' | 'hideValue' | 'valueState'
    >
  > {
  disabled: boolean;
  displayValue: string;
  hideValue: boolean;

  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'disabled',
  'displayValue',
  'hideValue',
  'value',
  'valueState',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-progress-indicator',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ProgressIndicator',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'disabled',
    'displayValue: display-value',
    'hideValue: hide-value',
    'value',
    'valueState: value-state',
  ],
  outputs: [],
  providers: [],
})
export class ProgressIndicatorComponent {
  disabled?: ProgressIndicatorElement['disabled'];
  displayValue?: ProgressIndicatorElement['displayValue'];
  hideValue?: ProgressIndicatorElement['hideValue'];
  valueState?: ProgressIndicatorElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ProgressIndicatorElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ProgressIndicatorElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ProgressIndicatorComponent
  extends Partial<ProgressIndicatorElement> {}
"
`;

exports[`Snapshot test Main Radio Button should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  forwardRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/RadioButton.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { Observable, fromEvent, merge } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';

interface RadioButtonComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

interface RadioButtonComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'checked'
    | 'disabled'
    | 'name'
    | 'readonly'
    | 'required'
    | 'text'
    | 'value'
    | 'valueState'
    | 'wrappingType'
    | 'change'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  checked: boolean;
  disabled: boolean;
  name: string;
  readonly: boolean;
  required: boolean;
  text: string;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  wrappingType: 'None' | 'Normal';

  addEventListener<K extends keyof RadioButtonComponentEventsMap>(
    type: K,
    listener: (
      this: RadioButtonComponentElement,
      ev: RadioButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof RadioButtonComponentEventsMap>(
    type: K,
    listener: (
      this: RadioButtonComponentElement,
      ev: RadioButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'checked',
  'disabled',
  'name',
  'readonly',
  'required',
  'text',
  'value',
  'valueState',
  'wrappingType',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-radio-button',
  exportAs: 'ui5RadioButton',
  standalone: true,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => RadioButtonComponent),
      multi: true,
    },
  ],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'checked',
    'disabled',
    'name',
    'readonly',
    'required',
    'text',
    'value',
    'valueState: value-state',
    'wrappingType: wrapping-type',
  ],
  outputs: ['change: ui5Change'],
})
export class RadioButtonComponent extends GenericControlValueAccessor {
  accessibleName?: RadioButtonComponentElement['accessibleName'];
  accessibleNameRef?: RadioButtonComponentElement['accessibleNameRef'];
  checked?: RadioButtonComponentElement['checked'];
  disabled?: RadioButtonComponentElement['disabled'];
  name?: RadioButtonComponentElement['name'];
  readonly?: RadioButtonComponentElement['readonly'];
  required?: RadioButtonComponentElement['required'];
  text?: RadioButtonComponentElement['text'];
  value?: RadioButtonComponentElement['value'];
  valueState?: RadioButtonComponentElement['valueState'];
  wrappingType?: RadioButtonComponentElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<RadioButtonComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.checked;
      },
      set value(val) {
        elementRef.nativeElement.checked = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface RadioButtonComponent
  extends Partial<RadioButtonComponentElement> {}
"
`;

exports[`Snapshot test Main Range Slider should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/RangeSlider.js';
import type RangeSlider from '@ui5/webcomponents/dist/RangeSlider.js';

interface RangeSliderComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
}

export declare interface RangeSliderElement
  extends Partial<
    Omit<
      RangeSlider,
      | 'change'
      | 'input'
      | 'accessibleName'
      | 'disabled'
      | 'showTickmarks'
      | 'showTooltip'
    >
  > {
  accessibleName: string;
  disabled: boolean;

  showTickmarks: boolean;
  showTooltip: boolean;

  addEventListener<K extends keyof RangeSliderComponentEventsMap>(
    type: K,
    listener: (
      this: RangeSliderElement,
      ev: RangeSliderComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof RangeSliderComponentEventsMap>(
    type: K,
    listener: (
      this: RangeSliderElement,
      ev: RangeSliderComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'disabled',
  'labelInterval',
  'max',
  'min',
  'showTickmarks',
  'showTooltip',
  'step',
  'endValue',
  'startValue',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-range-slider',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5RangeSlider',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'disabled',
    'labelInterval: label-interval',
    'max',
    'min',
    'showTickmarks: show-tickmarks',
    'showTooltip: show-tooltip',
    'step',
    'endValue: end-value',
    'startValue: start-value',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => RangeSliderComponent),
      multi: true,
    },
  ],
})
export class RangeSliderComponent extends GenericControlValueAccessor {
  accessibleName?: RangeSliderElement['accessibleName'];
  disabled?: RangeSliderElement['disabled'];
  showTickmarks?: RangeSliderElement['showTickmarks'];
  showTooltip?: RangeSliderElement['showTooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<RangeSliderElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return {
          endValue: elementRef.nativeElement.endValue,
          startValue: elementRef.nativeElement.startValue,
        };
      },
      set value(val) {
        elementRef.nativeElement.endValue = val?.endValue;
        elementRef.nativeElement.startValue = val?.startValue;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): RangeSliderElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface RangeSliderComponent
  extends Partial<RangeSliderElement> {
  change: EventEmitter<RangeSliderComponentEventsMap['change']>;
  input: EventEmitter<RangeSliderComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Rating Indicator should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/RatingIndicator.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface RatingIndicatorComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

interface RatingIndicatorComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'disabled'
    | 'max'
    | 'readonly'
    | 'value'
    | 'change'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  disabled: boolean;
  max: any;
  readonly: boolean;
  value: any;

  addEventListener<K extends keyof RatingIndicatorComponentEventsMap>(
    type: K,
    listener: (
      this: RatingIndicatorComponentElement,
      ev: RatingIndicatorComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof RatingIndicatorComponentEventsMap>(
    type: K,
    listener: (
      this: RatingIndicatorComponentElement,
      ev: RatingIndicatorComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'disabled',
  'max',
  'readonly',
  'value',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-rating-indicator',
  exportAs: 'ui5RatingIndicator',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'disabled',
    'max',
    'readonly',
    'value',
  ],
  outputs: ['change: ui5Change'],
})
export class RatingIndicatorComponent {
  accessibleName?: RatingIndicatorComponentElement['accessibleName'];
  disabled?: RatingIndicatorComponentElement['disabled'];
  readonly?: RatingIndicatorComponentElement['readonly'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<RatingIndicatorComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface RatingIndicatorComponent
  extends Partial<RatingIndicatorComponentElement> {}
"
`;

exports[`Snapshot test Main Responsive Popover should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/ResponsivePopover.js';
import type ResponsivePopover from '@ui5/webcomponents/dist/ResponsivePopover.js';

interface ResponsivePopoverComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'afterClose' | 'afterOpen' | 'beforeClose' | 'beforeOpen'
  > {
  afterClose: CustomEvent<void>;
  afterOpen: CustomEvent<void>;
  beforeClose: CustomEvent<{ escPressed: boolean }>;
  beforeOpen: CustomEvent<void>;
}

export declare interface ResponsivePopoverElement
  extends Partial<
    Omit<
      ResponsivePopover,
      | 'afterClose'
      | 'afterOpen'
      | 'beforeClose'
      | 'beforeOpen'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'initialFocus'
      | 'open'
      | 'preventFocusRestore'
      | 'allowTargetOverlap'
      | 'headerText'
      | 'hideArrow'
      | 'hideBackdrop'
      | 'horizontalAlign'
      | 'modal'
      | 'placementType'
      | 'verticalAlign'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  initialFocus: string;
  open: boolean;
  preventFocusRestore: boolean;
  allowTargetOverlap: boolean;
  headerText: string;
  hideArrow: boolean;
  hideBackdrop: boolean;
  horizontalAlign: 'Center' | 'Left' | 'Right' | 'Stretch';
  modal: boolean;

  placementType: 'Bottom' | 'Left' | 'Right' | 'Top';
  verticalAlign: 'Bottom' | 'Center' | 'Stretch' | 'Top';
  addEventListener<K extends keyof ResponsivePopoverComponentEventsMap>(
    type: K,
    listener: (
      this: ResponsivePopoverElement,
      ev: ResponsivePopoverComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ResponsivePopoverComponentEventsMap>(
    type: K,
    listener: (
      this: ResponsivePopoverElement,
      ev: ResponsivePopoverComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'initialFocus',
  'open',
  'preventFocusRestore',
  'allowTargetOverlap',
  'headerText',
  'hideArrow',
  'hideBackdrop',
  'horizontalAlign',
  'modal',
  'opener',
  'placementType',
  'verticalAlign',
])
@ProxyOutputs(['afterClose', 'afterOpen', 'beforeClose', 'beforeOpen'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'applyFocus',
  'close',
  'isOpen',
  'showAt',
])
@Component({
  selector: 'ui5-responsive-popover',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5ResponsivePopover',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'initialFocus: initial-focus',
    'open',
    'preventFocusRestore: prevent-focus-restore',
    'allowTargetOverlap: allow-target-overlap',
    'headerText: header-text',
    'hideArrow: hide-arrow',
    'hideBackdrop: hide-backdrop',
    'horizontalAlign: horizontal-align',
    'modal',
    'opener',
    'placementType: placement-type',
    'verticalAlign: vertical-align',
  ],
  outputs: [
    'afterClose: ui5AfterClose',
    'afterOpen: ui5AfterOpen',
    'beforeClose: ui5BeforeClose',
    'beforeOpen: ui5BeforeOpen',
  ],
  providers: [],
})
export class ResponsivePopoverComponent {
  accessibleName?: ResponsivePopoverElement['accessibleName'];
  accessibleNameRef?: ResponsivePopoverElement['accessibleNameRef'];
  initialFocus?: ResponsivePopoverElement['initialFocus'];
  open?: ResponsivePopoverElement['open'];
  preventFocusRestore?: ResponsivePopoverElement['preventFocusRestore'];
  allowTargetOverlap?: ResponsivePopoverElement['allowTargetOverlap'];
  headerText?: ResponsivePopoverElement['headerText'];
  hideArrow?: ResponsivePopoverElement['hideArrow'];
  hideBackdrop?: ResponsivePopoverElement['hideBackdrop'];
  horizontalAlign?: ResponsivePopoverElement['horizontalAlign'];
  modal?: ResponsivePopoverElement['modal'];
  placementType?: ResponsivePopoverElement['placementType'];
  verticalAlign?: ResponsivePopoverElement['verticalAlign'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ResponsivePopoverElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): ResponsivePopoverElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface ResponsivePopoverComponent
  extends Partial<ResponsivePopoverElement> {
  afterClose: EventEmitter<ResponsivePopoverComponentEventsMap['afterClose']>;
  afterOpen: EventEmitter<ResponsivePopoverComponentEventsMap['afterOpen']>;
  beforeClose: EventEmitter<ResponsivePopoverComponentEventsMap['beforeClose']>;
  beforeOpen: EventEmitter<ResponsivePopoverComponentEventsMap['beforeOpen']>;
}
"
`;

exports[`Snapshot test Main Segmented Button Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/SegmentedButtonItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface SegmentedButtonItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

interface SegmentedButtonItemComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibilityAttributes'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'design'
    | 'disabled'
    | 'icon'
    | 'iconEnd'
    | 'submits'
    | 'tooltip'
    | 'pressed'
    | 'click'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibilityAttributes: Record<string, any>;
  accessibleName: string;
  accessibleNameRef: string;
  design:
    | 'Attention'
    | 'Default'
    | 'Emphasized'
    | 'Negative'
    | 'Positive'
    | 'Transparent';
  disabled: boolean;
  icon: string;
  iconEnd: boolean;
  submits: boolean;
  tooltip: string;
  pressed: boolean;

  addEventListener<K extends keyof SegmentedButtonItemComponentEventsMap>(
    type: K,
    listener: (
      this: SegmentedButtonItemComponentElement,
      ev: SegmentedButtonItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SegmentedButtonItemComponentEventsMap>(
    type: K,
    listener: (
      this: SegmentedButtonItemComponentElement,
      ev: SegmentedButtonItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityAttributes',
  'accessibleName',
  'accessibleNameRef',
  'design',
  'disabled',
  'icon',
  'iconEnd',
  'submits',
  'tooltip',
  'pressed',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-segmented-button-item',
  exportAs: 'ui5SegmentedButtonItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityAttributes: accessibility-attributes',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'design',
    'disabled',
    'icon',
    'iconEnd: icon-end',
    'submits',
    'tooltip',
    'pressed',
  ],
  outputs: ['click: ui5Click'],
})
export class SegmentedButtonItemComponent {
  accessibleName?: SegmentedButtonItemComponentElement['accessibleName'];
  accessibleNameRef?: SegmentedButtonItemComponentElement['accessibleNameRef'];
  design?: SegmentedButtonItemComponentElement['design'];
  disabled?: SegmentedButtonItemComponentElement['disabled'];
  icon?: SegmentedButtonItemComponentElement['icon'];
  iconEnd?: SegmentedButtonItemComponentElement['iconEnd'];
  submits?: SegmentedButtonItemComponentElement['submits'];
  tooltip?: SegmentedButtonItemComponentElement['tooltip'];
  pressed?: SegmentedButtonItemComponentElement['pressed'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SegmentedButtonItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface SegmentedButtonItemComponent
  extends Partial<SegmentedButtonItemComponentElement> {}
"
`;

exports[`Snapshot test Main Segmented Button should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/SegmentedButton.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { SegmentedButtonItemComponent } from '@ui5/webcomponents-ngx/main/segmented-button-item';

interface SegmentedButtonComponentEventsMap
  extends Omit<HTMLElementEventMap, 'selectionChange'> {
  selectionChange: CustomEvent<{ selectedItem: HTMLElement }>;
}

interface SegmentedButtonComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'selectedItem'
    | 'selectionChange'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  selectedItem: SegmentedButtonItemComponent['element'];

  addEventListener<K extends keyof SegmentedButtonComponentEventsMap>(
    type: K,
    listener: (
      this: SegmentedButtonComponentElement,
      ev: SegmentedButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SegmentedButtonComponentEventsMap>(
    type: K,
    listener: (
      this: SegmentedButtonComponentElement,
      ev: SegmentedButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'accessibleName', 'selectedItem'])
@ProxyOutputs(['selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-segmented-button',
  exportAs: 'ui5SegmentedButton',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'selectedItem: selected-item',
  ],
  outputs: ['selectionChange: ui5SelectionChange'],
})
export class SegmentedButtonComponent {
  accessibleName?: SegmentedButtonComponentElement['accessibleName'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SegmentedButtonComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface SegmentedButtonComponent
  extends Partial<SegmentedButtonComponentElement> {}
"
`;

exports[`Snapshot test Main Select should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Select.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { OptionComponent } from '@ui5/webcomponents-ngx/main/option';

interface SelectComponentEventsMap extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<{ selectedOption: HTMLElement }>;
}

interface SelectComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'disabled'
    | 'name'
    | 'required'
    | 'selectedOption'
    | 'valueState'
    | 'change'
    | 'valueStateMessage'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;
  name: string;
  required: boolean;
  selectedOption: OptionComponent['element'];
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  valueStateMessage: Array<HTMLElement>;

  addEventListener<K extends keyof SelectComponentEventsMap>(
    type: K,
    listener: (
      this: SelectComponentElement,
      ev: SelectComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SelectComponentEventsMap>(
    type: K,
    listener: (
      this: SelectComponentElement,
      ev: SelectComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'name',
  'required',
  'selectedOption',
  'valueState',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-select',
  exportAs: 'ui5Select',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'name',
    'required',
    'selectedOption: selected-option',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change'],
})
export class SelectComponent {
  accessibleName?: SelectComponentElement['accessibleName'];
  accessibleNameRef?: SelectComponentElement['accessibleNameRef'];
  disabled?: SelectComponentElement['disabled'];
  name?: SelectComponentElement['name'];
  required?: SelectComponentElement['required'];
  valueState?: SelectComponentElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SelectComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get valueStateMessage(): Array<HTMLElement> {
    return this.elementRef.nativeElement.valueStateMessage;
  }
}
export declare interface SelectComponent
  extends Partial<SelectComponentElement> {}
"
`;

exports[`Snapshot test Main Slider Base should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/SliderBase.js';
import type SliderBase from '@ui5/webcomponents/dist/SliderBase.js';

interface SliderBaseComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
}

export declare interface SliderBaseElement
  extends Partial<
    Omit<
      SliderBase,
      | 'change'
      | 'input'
      | 'accessibleName'
      | 'disabled'
      | 'showTickmarks'
      | 'showTooltip'
    >
  > {
  accessibleName: string;
  disabled: boolean;

  showTickmarks: boolean;
  showTooltip: boolean;

  addEventListener<K extends keyof SliderBaseComponentEventsMap>(
    type: K,
    listener: (
      this: SliderBaseElement,
      ev: SliderBaseComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SliderBaseComponentEventsMap>(
    type: K,
    listener: (
      this: SliderBaseElement,
      ev: SliderBaseComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'disabled',
  'labelInterval',
  'max',
  'min',
  'showTickmarks',
  'showTooltip',
  'step',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-slider',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SliderBase',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'disabled',
    'labelInterval: label-interval',
    'max',
    'min',
    'showTickmarks: show-tickmarks',
    'showTooltip: show-tooltip',
    'step',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [],
})
export class SliderBaseComponent {
  accessibleName?: SliderBaseElement['accessibleName'];
  disabled?: SliderBaseElement['disabled'];
  showTickmarks?: SliderBaseElement['showTickmarks'];
  showTooltip?: SliderBaseElement['showTooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SliderBaseElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SliderBaseElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SliderBaseComponent
  extends Partial<SliderBaseElement> {
  change: EventEmitter<SliderBaseComponentEventsMap['change']>;
  input: EventEmitter<SliderBaseComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Slider should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/Slider.js';
import type Slider from '@ui5/webcomponents/dist/Slider.js';

interface SliderComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
}

export declare interface SliderElement
  extends Partial<
    Omit<
      Slider,
      | 'change'
      | 'input'
      | 'accessibleName'
      | 'disabled'
      | 'showTickmarks'
      | 'showTooltip'
    >
  > {
  accessibleName: string;
  disabled: boolean;

  showTickmarks: boolean;
  showTooltip: boolean;

  addEventListener<K extends keyof SliderComponentEventsMap>(
    type: K,
    listener: (this: SliderElement, ev: SliderComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SliderComponentEventsMap>(
    type: K,
    listener: (this: SliderElement, ev: SliderComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'disabled',
  'labelInterval',
  'max',
  'min',
  'showTickmarks',
  'showTooltip',
  'step',
  'value',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-slider',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Slider',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'disabled',
    'labelInterval: label-interval',
    'max',
    'min',
    'showTickmarks: show-tickmarks',
    'showTooltip: show-tooltip',
    'step',
    'value',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => SliderComponent),
      multi: true,
    },
  ],
})
export class SliderComponent extends GenericControlValueAccessor {
  accessibleName?: SliderElement['accessibleName'];
  disabled?: SliderElement['disabled'];
  showTickmarks?: SliderElement['showTickmarks'];
  showTooltip?: SliderElement['showTooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SliderElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): SliderElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SliderComponent extends Partial<SliderElement> {
  change: EventEmitter<SliderComponentEventsMap['change']>;
  input: EventEmitter<SliderComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Split Button should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/SplitButton.js';
import type SplitButton from '@ui5/webcomponents/dist/SplitButton.js';

interface SplitButtonComponentEventsMap
  extends Omit<HTMLElementEventMap, 'arrowClick' | 'click'> {
  arrowClick: CustomEvent<void>;
  click: CustomEvent<void>;
}

export declare interface SplitButtonElement
  extends Partial<
    Omit<
      SplitButton,
      | 'arrowClick'
      | 'click'
      | 'accessibleName'
      | 'activeIcon'
      | 'design'
      | 'disabled'
      | 'icon'
    >
  > {
  accessibleName: string;
  activeIcon: string;
  design:
    | 'Attention'
    | 'Default'
    | 'Emphasized'
    | 'Negative'
    | 'Positive'
    | 'Transparent';
  disabled: boolean;
  icon: string;
  addEventListener<K extends keyof SplitButtonComponentEventsMap>(
    type: K,
    listener: (
      this: SplitButtonElement,
      ev: SplitButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SplitButtonComponentEventsMap>(
    type: K,
    listener: (
      this: SplitButtonElement,
      ev: SplitButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'activeIcon',
  'design',
  'disabled',
  'icon',
])
@ProxyOutputs(['arrowClick', 'click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-split-button',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SplitButton',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'activeIcon: active-icon',
    'design',
    'disabled',
    'icon',
  ],
  outputs: ['arrowClick: ui5ArrowClick', 'click: ui5Click'],
  providers: [],
})
export class SplitButtonComponent {
  accessibleName?: SplitButtonElement['accessibleName'];
  activeIcon?: SplitButtonElement['activeIcon'];
  design?: SplitButtonElement['design'];
  disabled?: SplitButtonElement['disabled'];
  icon?: SplitButtonElement['icon'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SplitButtonElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SplitButtonElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SplitButtonComponent
  extends Partial<SplitButtonElement> {
  arrowClick: EventEmitter<SplitButtonComponentEventsMap['arrowClick']>;
  click: EventEmitter<SplitButtonComponentEventsMap['click']>;
}
"
`;

exports[`Snapshot test Main Standard List Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/StandardListItem.js';
import type StandardListItem from '@ui5/webcomponents/dist/StandardListItem.js';

interface StandardListItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'detailClick'> {
  detailClick: CustomEvent<void>;
}

export declare interface StandardListItemElement
  extends Partial<
    Omit<
      StandardListItem,
      | 'detailClick'
      | 'selected'
      | 'navigated'
      | 'type'
      | 'accessibleName'
      | 'additionalText'
      | 'additionalTextState'
      | 'description'
      | 'icon'
      | 'iconEnd'
      | 'image'
    >
  > {
  selected: boolean;
  navigated: boolean;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
  accessibleName: string;
  additionalText: string;
  additionalTextState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  description: string;
  icon: string;
  iconEnd: boolean;
  image: string;
  addEventListener<K extends keyof StandardListItemComponentEventsMap>(
    type: K,
    listener: (
      this: StandardListItemElement,
      ev: StandardListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof StandardListItemComponentEventsMap>(
    type: K,
    listener: (
      this: StandardListItemElement,
      ev: StandardListItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'navigated',
  'type',
  'accessibleName',
  'additionalText',
  'additionalTextState',
  'description',
  'icon',
  'iconEnd',
  'image',
])
@ProxyOutputs(['detailClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-li',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5StandardListItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'navigated',
    'type',
    'accessibleName: accessible-name',
    'additionalText: additional-text',
    'additionalTextState: additional-text-state',
    'description',
    'icon',
    'iconEnd: icon-end',
    'image',
  ],
  outputs: ['detailClick: ui5DetailClick'],
  providers: [],
})
export class StandardListItemComponent {
  selected?: StandardListItemElement['selected'];
  navigated?: StandardListItemElement['navigated'];
  type?: StandardListItemElement['type'];
  accessibleName?: StandardListItemElement['accessibleName'];
  additionalText?: StandardListItemElement['additionalText'];
  additionalTextState?: StandardListItemElement['additionalTextState'];
  description?: StandardListItemElement['description'];
  icon?: StandardListItemElement['icon'];
  iconEnd?: StandardListItemElement['iconEnd'];
  image?: StandardListItemElement['image'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<StandardListItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): StandardListItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface StandardListItemComponent
  extends Partial<StandardListItemElement> {
  detailClick: EventEmitter<StandardListItemComponentEventsMap['detailClick']>;
}
"
`;

exports[`Snapshot test Main Step Input should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/StepInput.js';
import type StepInput from '@ui5/webcomponents/dist/StepInput.js';

interface StepInputComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

export declare interface StepInputElement
  extends Partial<
    Omit<
      StepInput,
      | 'change'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'disabled'
      | 'name'
      | 'placeholder'
      | 'readonly'
      | 'required'
      | 'valueState'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;

  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;

  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  addEventListener<K extends keyof StepInputComponentEventsMap>(
    type: K,
    listener: (
      this: StepInputElement,
      ev: StepInputComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof StepInputComponentEventsMap>(
    type: K,
    listener: (
      this: StepInputElement,
      ev: StepInputComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'max',
  'min',
  'name',
  'placeholder',
  'readonly',
  'required',
  'step',
  'value',
  'valuePrecision',
  'valueState',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-step-input',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5StepInput',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'max',
    'min',
    'name',
    'placeholder',
    'readonly',
    'required',
    'step',
    'value',
    'valuePrecision: value-precision',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change'],
  providers: [],
})
export class StepInputComponent {
  accessibleName?: StepInputElement['accessibleName'];
  accessibleNameRef?: StepInputElement['accessibleNameRef'];
  disabled?: StepInputElement['disabled'];
  name?: StepInputElement['name'];
  placeholder?: StepInputElement['placeholder'];
  readonly?: StepInputElement['readonly'];
  required?: StepInputElement['required'];
  valueState?: StepInputElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<StepInputElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): StepInputElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface StepInputComponent extends Partial<StepInputElement> {
  change: EventEmitter<StepInputComponentEventsMap['change']>;
}
"
`;

exports[`Snapshot test Main Suggestion Group Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/SuggestionGroupItem.js';
import type SuggestionGroupItem from '@ui5/webcomponents/dist/SuggestionGroupItem.js';

export declare interface SuggestionGroupItemElement
  extends Partial<Omit<SuggestionGroupItem, 'text'>> {
  text: string;
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'text'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-suggestion-group-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SuggestionGroupItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'text',
  ],
  outputs: [],
  providers: [],
})
export class SuggestionGroupItemComponent {
  text?: SuggestionGroupItemElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SuggestionGroupItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SuggestionGroupItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SuggestionGroupItemComponent
  extends Partial<SuggestionGroupItemElement> {}
"
`;

exports[`Snapshot test Main Suggestion Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/SuggestionItem.js';
import type SuggestionItem from '@ui5/webcomponents/dist/SuggestionItem.js';

export declare interface SuggestionItemElement
  extends Partial<
    Omit<
      SuggestionItem,
      | 'additionalText'
      | 'additionalTextState'
      | 'description'
      | 'icon'
      | 'iconEnd'
      | 'image'
      | 'text'
      | 'type'
    >
  > {
  additionalText: string;
  additionalTextState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  description: string;
  icon: string;
  iconEnd: boolean;
  image: string;
  text: string;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'additionalText',
  'additionalTextState',
  'description',
  'icon',
  'iconEnd',
  'image',
  'text',
  'type',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-suggestion-item',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5SuggestionItem',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'additionalTextState: additional-text-state',
    'description',
    'icon',
    'iconEnd: icon-end',
    'image',
    'text',
    'type',
  ],
  outputs: [],
  providers: [],
})
export class SuggestionItemComponent {
  additionalText?: SuggestionItemElement['additionalText'];
  additionalTextState?: SuggestionItemElement['additionalTextState'];
  description?: SuggestionItemElement['description'];
  icon?: SuggestionItemElement['icon'];
  iconEnd?: SuggestionItemElement['iconEnd'];
  image?: SuggestionItemElement['image'];
  text?: SuggestionItemElement['text'];
  type?: SuggestionItemElement['type'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SuggestionItemElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): SuggestionItemElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SuggestionItemComponent
  extends Partial<SuggestionItemElement> {}
"
`;

exports[`Snapshot test Main Switch should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/Switch.js';
import type Switch from '@ui5/webcomponents/dist/Switch.js';

interface SwitchComponentEventsMap extends Omit<HTMLElementEventMap, 'change'> {
  change: CustomEvent<void>;
}

export declare interface SwitchElement
  extends Partial<
    Omit<
      Switch,
      | 'change'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'checked'
      | 'design'
      | 'disabled'
      | 'textOff'
      | 'textOn'
      | 'tooltip'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  checked: boolean;
  design: 'Graphical' | 'Textual';
  disabled: boolean;
  textOff: string;
  textOn: string;
  tooltip: string;
  addEventListener<K extends keyof SwitchComponentEventsMap>(
    type: K,
    listener: (this: SwitchElement, ev: SwitchComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof SwitchComponentEventsMap>(
    type: K,
    listener: (this: SwitchElement, ev: SwitchComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'checked',
  'design',
  'disabled',
  'textOff',
  'textOn',
  'tooltip',
])
@ProxyOutputs(['change'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-switch',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Switch',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'checked',
    'design',
    'disabled',
    'textOff: text-off',
    'textOn: text-on',
    'tooltip',
  ],
  outputs: ['change: ui5Change'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => SwitchComponent),
      multi: true,
    },
  ],
})
export class SwitchComponent extends GenericControlValueAccessor {
  accessibleName?: SwitchElement['accessibleName'];
  accessibleNameRef?: SwitchElement['accessibleNameRef'];
  checked?: SwitchElement['checked'];
  design?: SwitchElement['design'];
  disabled?: SwitchElement['disabled'];
  textOff?: SwitchElement['textOff'];
  textOn?: SwitchElement['textOn'];
  tooltip?: SwitchElement['tooltip'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<SwitchElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.checked;
      },
      set value(val) {
        elementRef.nativeElement.checked = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): SwitchElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface SwitchComponent extends Partial<SwitchElement> {
  change: EventEmitter<SwitchComponentEventsMap['change']>;
}
"
`;

exports[`Snapshot test Main Tab Container should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/TabContainer.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';

interface TabContainerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'tabSelect'> {
  tabSelect: CustomEvent<{ tab: HTMLElement; tabIndex: number }>;
}

interface TabContainerComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'allItems'
    | 'collapsed'
    | 'contentBackgroundDesign'
    | 'fixed'
    | 'headerBackgroundDesign'
    | 'showOverflow'
    | 'tabLayout'
    | 'tabsOverflowMode'
    | 'tabSelect'
    | 'overflowButton'
    | 'startOverflowButton'
  > {
  effectiveDir: any;
  isUi5Element: any;
  allItems: any;
  collapsed: boolean;
  contentBackgroundDesign: 'Solid' | 'Translucent' | 'Transparent';
  fixed: boolean;
  headerBackgroundDesign: 'Solid' | 'Translucent' | 'Transparent';
  showOverflow: boolean;
  tabLayout: 'Inline' | 'Standard';
  tabsOverflowMode: 'End' | 'StartAndEnd';

  overflowButton: ButtonComponent['element'];
  startOverflowButton: ButtonComponent['element'];

  addEventListener<K extends keyof TabContainerComponentEventsMap>(
    type: K,
    listener: (
      this: TabContainerComponentElement,
      ev: TabContainerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TabContainerComponentEventsMap>(
    type: K,
    listener: (
      this: TabContainerComponentElement,
      ev: TabContainerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'allItems',
  'collapsed',
  'contentBackgroundDesign',
  'fixed',
  'headerBackgroundDesign',
  'showOverflow',
  'tabLayout',
  'tabsOverflowMode',
])
@ProxyOutputs(['tabSelect'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tabcontainer',
  exportAs: 'ui5Tabcontainer',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'allItems: all-items',
    'collapsed',
    'contentBackgroundDesign: content-background-design',
    'fixed',
    'headerBackgroundDesign: header-background-design',
    'showOverflow: show-overflow',
    'tabLayout: tab-layout',
    'tabsOverflowMode: tabs-overflow-mode',
  ],
  outputs: ['tabSelect: ui5TabSelect'],
})
export class TabContainerComponent {
  collapsed?: TabContainerComponentElement['collapsed'];
  contentBackgroundDesign?: TabContainerComponentElement['contentBackgroundDesign'];
  fixed?: TabContainerComponentElement['fixed'];
  headerBackgroundDesign?: TabContainerComponentElement['headerBackgroundDesign'];
  showOverflow?: TabContainerComponentElement['showOverflow'];
  tabLayout?: TabContainerComponentElement['tabLayout'];
  tabsOverflowMode?: TabContainerComponentElement['tabsOverflowMode'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TabContainerComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get overflowButton(): ButtonComponent['element'] {
    return this.elementRef.nativeElement.overflowButton;
  }
  get startOverflowButton(): ButtonComponent['element'] {
    return this.elementRef.nativeElement.startOverflowButton;
  }
}
export declare interface TabContainerComponent
  extends Partial<TabContainerComponentElement> {}
"
`;

exports[`Snapshot test Main Tab Separator should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/TabSeparator.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface TabSeparatorComponentElement
  extends Omit<HTMLElement, 'effectiveDir' | 'isUi5Element'> {
  effectiveDir: any;
  isUi5Element: any;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  getTabInStripDomRef(): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'getTabInStripDomRef',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tab-separator',
  exportAs: 'ui5TabSeparator',
  standalone: true,
  providers: [],
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: [],
})
export class TabSeparatorComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TabSeparatorComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface TabSeparatorComponent
  extends Partial<TabSeparatorComponentElement> {}
"
`;

exports[`Snapshot test Main Tab should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Tab.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { TabSeparatorComponent } from '@ui5/webcomponents-ngx/main/tab-separator';

interface TabComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'additionalText'
    | 'design'
    | 'disabled'
    | 'icon'
    | 'selected'
    | 'text'
    | 'subTabs'
  > {
  effectiveDir: any;
  isUi5Element: any;
  additionalText: string;
  design: 'Critical' | 'Default' | 'Negative' | 'Neutral' | 'Positive';
  disabled: boolean;
  icon: string;
  selected: boolean;
  text: string;

  subTabs: Array<TabSeparatorComponent['element'] | TabComponent['element']>;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  getTabInStripDomRef(): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'additionalText',
  'design',
  'disabled',
  'icon',
  'selected',
  'text',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'getTabInStripDomRef',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tab',
  exportAs: 'ui5Tab',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'additionalText: additional-text',
    'design',
    'disabled',
    'icon',
    'selected',
    'text',
  ],
  outputs: [],
})
export class TabComponent {
  additionalText?: TabComponentElement['additionalText'];
  design?: TabComponentElement['design'];
  disabled?: TabComponentElement['disabled'];
  icon?: TabComponentElement['icon'];
  selected?: TabComponentElement['selected'];
  text?: TabComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TabComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get subTabs(): Array<
    TabSeparatorComponent['element'] | TabComponent['element']
  > {
    return this.elementRef.nativeElement.subTabs;
  }
}
export declare interface TabComponent extends Partial<TabComponentElement> {}
"
`;

exports[`Snapshot test Main Table Cell should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/TableCell.js';
import type TableCell from '@ui5/webcomponents/dist/TableCell.js';

export declare interface TableCellElement extends Partial<TableCell> {}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-table-cell',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TableCell',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: [],
  providers: [],
})
export class TableCellComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TableCellElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TableCellElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TableCellComponent extends Partial<TableCellElement> {}
"
`;

exports[`Snapshot test Main Table Column should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/TableColumn.js';
import type TableColumn from '@ui5/webcomponents/dist/TableColumn.js';

export declare interface TableColumnElement
  extends Partial<Omit<TableColumn, 'demandPopin' | 'popinText'>> {
  demandPopin: boolean;

  popinText: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'demandPopin',
  'minWidth',
  'popinDisplay',
  'popinText',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-table-column',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TableColumn',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'demandPopin: demand-popin',
    'minWidth: min-width',
    'popinDisplay: popin-display',
    'popinText: popin-text',
  ],
  outputs: [],
  providers: [],
})
export class TableColumnComponent {
  demandPopin?: TableColumnElement['demandPopin'];
  popinText?: TableColumnElement['popinText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TableColumnElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TableColumnElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TableColumnComponent
  extends Partial<TableColumnElement> {}
"
`;

exports[`Snapshot test Main Table Group Row should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/TableGroupRow.js';
import type TableGroupRow from '@ui5/webcomponents/dist/TableGroupRow.js';

export declare interface TableGroupRowElement extends Partial<TableGroupRow> {}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-table-group-row',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TableGroupRow',
  standalone: true,
  inputs: ['effectiveDir: effective-dir', 'isUi5Element: is-ui-5-element'],
  outputs: [],
  providers: [],
})
export class TableGroupRowComponent {
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TableGroupRowElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TableGroupRowElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TableGroupRowComponent
  extends Partial<TableGroupRowElement> {}
"
`;

exports[`Snapshot test Main Table Row should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/TableRow.js';
import type TableRow from '@ui5/webcomponents/dist/TableRow.js';

export declare interface TableRowElement
  extends Partial<Omit<TableRow, 'navigated' | 'selected' | 'type'>> {
  navigated: boolean;
  selected: boolean;
  type: 'Active' | 'Inactive';
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'navigated', 'selected', 'type'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-table-row',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TableRow',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'navigated',
    'selected',
    'type',
  ],
  outputs: [],
  providers: [],
})
export class TableRowComponent {
  navigated?: TableRowElement['navigated'];
  selected?: TableRowElement['selected'];
  type?: TableRowElement['type'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TableRowElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TableRowElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TableRowComponent extends Partial<TableRowElement> {}
"
`;

exports[`Snapshot test Main Table should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Table.js';
import type Table from '@ui5/webcomponents/dist/Table.js';

interface TableComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    'loadMore' | 'popinChange' | 'rowClick' | 'selectionChange'
  > {
  loadMore: CustomEvent<void>;
  popinChange: CustomEvent<{ poppedColumns: Array<any> }>;
  rowClick: CustomEvent<{ row: HTMLElement }>;
  selectionChange: CustomEvent<{
    selectedRows: Array<any>;
    previouslySelectedRows: Array<any>;
  }>;
}

export declare interface TableElement
  extends Partial<
    Omit<
      Table,
      | 'loadMore'
      | 'popinChange'
      | 'rowClick'
      | 'selectionChange'
      | 'accessibleName'
      | 'accessibleNameRef'
      | 'busy'
      | 'growing'
      | 'growingButtonSubtext'
      | 'growingButtonText'
      | 'hideNoData'
      | 'mode'
      | 'noDataText'
      | 'stickyColumnHeader'
    >
  > {
  accessibleName: string;
  accessibleNameRef: string;
  busy: boolean;

  growing: 'Button' | 'None' | 'Scroll';
  growingButtonSubtext: string;
  growingButtonText: string;
  hideNoData: boolean;
  mode: 'MultiSelect' | 'None' | 'SingleSelect';
  noDataText: string;
  stickyColumnHeader: boolean;
  addEventListener<K extends keyof TableComponentEventsMap>(
    type: K,
    listener: (this: TableElement, ev: TableComponentEventsMap[K]) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TableComponentEventsMap>(
    type: K,
    listener: (this: TableElement, ev: TableComponentEventsMap[K]) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'busy',
  'busyDelay',
  'growing',
  'growingButtonSubtext',
  'growingButtonText',
  'hideNoData',
  'mode',
  'noDataText',
  'stickyColumnHeader',
])
@ProxyOutputs(['loadMore', 'popinChange', 'rowClick', 'selectionChange'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-table',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Table',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'busy',
    'busyDelay: busy-delay',
    'growing',
    'growingButtonSubtext: growing-button-subtext',
    'growingButtonText: growing-button-text',
    'hideNoData: hide-no-data',
    'mode',
    'noDataText: no-data-text',
    'stickyColumnHeader: sticky-column-header',
  ],
  outputs: [
    'loadMore: ui5LoadMore',
    'popinChange: ui5PopinChange',
    'rowClick: ui5RowClick',
    'selectionChange: ui5SelectionChange',
  ],
  providers: [],
})
export class TableComponent {
  accessibleName?: TableElement['accessibleName'];
  accessibleNameRef?: TableElement['accessibleNameRef'];
  busy?: TableElement['busy'];
  growing?: TableElement['growing'];
  growingButtonSubtext?: TableElement['growingButtonSubtext'];
  growingButtonText?: TableElement['growingButtonText'];
  hideNoData?: TableElement['hideNoData'];
  mode?: TableElement['mode'];
  noDataText?: TableElement['noDataText'];
  stickyColumnHeader?: TableElement['stickyColumnHeader'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TableElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TableElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TableComponent extends Partial<TableElement> {
  loadMore: EventEmitter<TableComponentEventsMap['loadMore']>;
  popinChange: EventEmitter<TableComponentEventsMap['popinChange']>;
  rowClick: EventEmitter<TableComponentEventsMap['rowClick']>;
  selectionChange: EventEmitter<TableComponentEventsMap['selectionChange']>;
}
"
`;

exports[`Snapshot test Main Text Area should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/TextArea.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface TextAreaComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
}

interface TextAreaComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'disabled'
    | 'growing'
    | 'growingMaxLines'
    | 'maxlength'
    | 'name'
    | 'placeholder'
    | 'readonly'
    | 'required'
    | 'rows'
    | 'showExceededText'
    | 'value'
    | 'valueState'
    | 'change'
    | 'input'
    | 'valueStateMessage'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  disabled: boolean;
  growing: boolean;
  growingMaxLines: any;
  maxlength: any;
  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  rows: any;
  showExceededText: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  valueStateMessage: Array<HTMLElement>;

  addEventListener<K extends keyof TextAreaComponentEventsMap>(
    type: K,
    listener: (
      this: TextAreaComponentElement,
      ev: TextAreaComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TextAreaComponentEventsMap>(
    type: K,
    listener: (
      this: TextAreaComponentElement,
      ev: TextAreaComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'disabled',
  'growing',
  'growingMaxLines',
  'maxlength',
  'name',
  'placeholder',
  'readonly',
  'required',
  'rows',
  'showExceededText',
  'value',
  'valueState',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-textarea',
  exportAs: 'ui5Textarea',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'disabled',
    'growing',
    'growingMaxLines: growing-max-lines',
    'maxlength',
    'name',
    'placeholder',
    'readonly',
    'required',
    'rows',
    'showExceededText: show-exceeded-text',
    'value',
    'valueState: value-state',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
})
export class TextAreaComponent {
  accessibleName?: TextAreaComponentElement['accessibleName'];
  accessibleNameRef?: TextAreaComponentElement['accessibleNameRef'];
  disabled?: TextAreaComponentElement['disabled'];
  growing?: TextAreaComponentElement['growing'];
  name?: TextAreaComponentElement['name'];
  placeholder?: TextAreaComponentElement['placeholder'];
  readonly?: TextAreaComponentElement['readonly'];
  required?: TextAreaComponentElement['required'];
  showExceededText?: TextAreaComponentElement['showExceededText'];
  value?: TextAreaComponentElement['value'];
  valueState?: TextAreaComponentElement['valueState'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TextAreaComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get valueStateMessage(): Array<HTMLElement> {
    return this.elementRef.nativeElement.valueStateMessage;
  }
}
export declare interface TextAreaComponent
  extends Partial<TextAreaComponentElement> {}
"
`;

exports[`Snapshot test Main Theming should match the snapshot 1`] = `
"import { WebcomponentsThemingProvider } from '@ui5/webcomponents-ngx/theming';
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
class Ui5WebcomponentsMainThemingService extends WebcomponentsThemingProvider {
  name = 'ui-5-webcomponents-main-theming-service';
  constructor() {
    super(
      () => import('@ui5/webcomponents/dist/generated/json-imports/Themes.js')
    );
  }
}

export { Ui5WebcomponentsMainThemingService };
"
`;

exports[`Snapshot test Main Time Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
  forwardRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge, fromEvent } from 'rxjs';
import { GenericControlValueAccessor } from '@ui5/webcomponents-ngx/generic-cva';
import '@ui5/webcomponents/dist/TimePicker.js';
import type TimePicker from '@ui5/webcomponents/dist/TimePicker.js';

interface TimePickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'input'> {
  change: CustomEvent<void>;
  input: CustomEvent<void>;
}

export declare interface TimePickerElement
  extends Partial<
    Omit<
      TimePicker,
      | 'change'
      | 'input'
      | 'disabled'
      | 'readonly'
      | 'value'
      | 'valueState'
      | 'formatPattern'
      | 'placeholder'
    >
  > {
  disabled: boolean;
  readonly: boolean;
  value: string;
  valueState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';

  formatPattern: string;
  placeholder: string;
  addEventListener<K extends keyof TimePickerComponentEventsMap>(
    type: K,
    listener: (
      this: TimePickerElement,
      ev: TimePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TimePickerComponentEventsMap>(
    type: K,
    listener: (
      this: TimePickerElement,
      ev: TimePickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'disabled',
  'readonly',
  'value',
  'valueState',
  'dateValue',
  'formatPattern',
  'placeholder',
])
@ProxyOutputs(['change', 'input'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'closePicker',
  'formatValue',
  'isOpen',
  'isValid',
  'openPicker',
])
@Component({
  selector: 'ui5-time-picker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5TimePicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'disabled',
    'readonly',
    'value',
    'valueState: value-state',
    'dateValue: date-value',
    'formatPattern: format-pattern',
    'placeholder',
  ],
  outputs: ['change: ui5Change', 'input: ui5Input'],
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => TimePickerComponent),
      multi: true,
    },
  ],
})
export class TimePickerComponent extends GenericControlValueAccessor {
  disabled?: TimePickerElement['disabled'];
  readonly?: TimePickerElement['readonly'];
  value?: TimePickerElement['value'];
  valueState?: TimePickerElement['valueState'];
  formatPattern?: TimePickerElement['formatPattern'];
  placeholder?: TimePickerElement['placeholder'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TimePickerElement>,
    private zone: NgZone
  ) {
    c.detach();
    super({
      get value() {
        return elementRef.nativeElement.value;
      },
      set value(val) {
        elementRef.nativeElement.value = val;
      },
      valueUpdatedNotifier$: merge(
        fromEvent(elementRef.nativeElement, 'change'),
        fromEvent(elementRef.nativeElement, 'input')
      ),
      setDisabledState: (isDisabled: boolean): void => {
        elementRef.nativeElement.disabled = isDisabled;
      },
    });
  }

  get element(): TimePickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TimePickerComponent
  extends Partial<TimePickerElement> {
  change: EventEmitter<TimePickerComponentEventsMap['change']>;
  input: EventEmitter<TimePickerComponentEventsMap['input']>;
}
"
`;

exports[`Snapshot test Main Title should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/Title.js';
import type Title from '@ui5/webcomponents/dist/Title.js';

export declare interface TitleElement
  extends Partial<Omit<Title, 'level' | 'wrappingType'>> {
  level: 'H1' | 'H2' | 'H3' | 'H4' | 'H5' | 'H6';
  wrappingType: 'None' | 'Normal';
}

// TS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'level', 'wrappingType'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-title',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5Title',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'level',
    'wrappingType: wrapping-type',
  ],
  outputs: [],
  providers: [],
})
export class TitleComponent {
  level?: TitleElement['level'];
  wrappingType?: TitleElement['wrappingType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TitleElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): TitleElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface TitleComponent extends Partial<TitleElement> {}
"
`;

exports[`Snapshot test Main Toast should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Toast.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface ToastComponentElement
  extends Omit<
    HTMLElement,
    'effectiveDir' | 'isUi5Element' | 'duration' | 'placement'
  > {
  effectiveDir: any;
  isUi5Element: any;
  duration: any;
  placement:
    | 'BottomCenter'
    | 'BottomEnd'
    | 'BottomStart'
    | 'MiddleCenter'
    | 'MiddleEnd'
    | 'MiddleStart'
    | 'TopCenter'
    | 'TopEnd'
    | 'TopStart';

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  show(): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'duration', 'placement'])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'show',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-toast',
  exportAs: 'ui5Toast',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'duration',
    'placement',
  ],
  outputs: [],
})
export class ToastComponent {
  placement?: ToastComponentElement['placement'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ToastComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface ToastComponent
  extends Partial<ToastComponentElement> {}
"
`;

exports[`Snapshot test Main Toggle Button should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/ToggleButton.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface ToggleButtonComponentEventsMap
  extends Omit<HTMLElementEventMap, 'click'> {
  click: CustomEvent<void>;
}

interface ToggleButtonComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibilityAttributes'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'design'
    | 'disabled'
    | 'icon'
    | 'iconEnd'
    | 'submits'
    | 'tooltip'
    | 'pressed'
    | 'click'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibilityAttributes: Record<string, any>;
  accessibleName: string;
  accessibleNameRef: string;
  design:
    | 'Attention'
    | 'Default'
    | 'Emphasized'
    | 'Negative'
    | 'Positive'
    | 'Transparent';
  disabled: boolean;
  icon: string;
  iconEnd: boolean;
  submits: boolean;
  tooltip: string;
  pressed: boolean;

  addEventListener<K extends keyof ToggleButtonComponentEventsMap>(
    type: K,
    listener: (
      this: ToggleButtonComponentElement,
      ev: ToggleButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof ToggleButtonComponentEventsMap>(
    type: K,
    listener: (
      this: ToggleButtonComponentElement,
      ev: ToggleButtonComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibilityAttributes',
  'accessibleName',
  'accessibleNameRef',
  'design',
  'disabled',
  'icon',
  'iconEnd',
  'submits',
  'tooltip',
  'pressed',
])
@ProxyOutputs(['click'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-toggle-button',
  exportAs: 'ui5ToggleButton',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibilityAttributes: accessibility-attributes',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'design',
    'disabled',
    'icon',
    'iconEnd: icon-end',
    'submits',
    'tooltip',
    'pressed',
  ],
  outputs: ['click: ui5Click'],
})
export class ToggleButtonComponent {
  accessibleName?: ToggleButtonComponentElement['accessibleName'];
  accessibleNameRef?: ToggleButtonComponentElement['accessibleNameRef'];
  design?: ToggleButtonComponentElement['design'];
  disabled?: ToggleButtonComponentElement['disabled'];
  icon?: ToggleButtonComponentElement['icon'];
  iconEnd?: ToggleButtonComponentElement['iconEnd'];
  submits?: ToggleButtonComponentElement['submits'];
  tooltip?: ToggleButtonComponentElement['tooltip'];
  pressed?: ToggleButtonComponentElement['pressed'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<ToggleButtonComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }
}
export declare interface ToggleButtonComponent
  extends Partial<ToggleButtonComponentElement> {}
"
`;

exports[`Snapshot test Main Token should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Token.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { IconComponent } from '@ui5/webcomponents-ngx/main/icon';

interface TokenComponentEventsMap extends Omit<HTMLElementEventMap, 'select'> {
  select: CustomEvent<void>;
}

interface TokenComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'readonly'
    | 'selected'
    | 'text'
    | 'select'
    | 'closeIcon'
  > {
  effectiveDir: any;
  isUi5Element: any;
  readonly: boolean;
  selected: boolean;
  text: string;

  closeIcon: IconComponent['element'];

  addEventListener<K extends keyof TokenComponentEventsMap>(
    type: K,
    listener: (
      this: TokenComponentElement,
      ev: TokenComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TokenComponentEventsMap>(
    type: K,
    listener: (
      this: TokenComponentElement,
      ev: TokenComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;
}

// JS source file
@ProxyInputs(['effectiveDir', 'isUi5Element', 'readonly', 'selected', 'text'])
@ProxyOutputs(['select'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-token',
  exportAs: 'ui5Token',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'readonly',
    'selected',
    'text',
  ],
  outputs: ['select: ui5Select'],
})
export class TokenComponent {
  readonly?: TokenComponentElement['readonly'];
  selected?: TokenComponentElement['selected'];
  text?: TokenComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TokenComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get closeIcon(): IconComponent['element'] {
    return this.elementRef.nativeElement.closeIcon;
  }
}
export declare interface TokenComponent
  extends Partial<TokenComponentElement> {}
"
`;

exports[`Snapshot test Main Tree Item Custom should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/TreeItemCustom.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';

interface TreeItemCustomComponentEventsMap
  extends Omit<HTMLElementEventMap, 'detailClick'> {
  detailClick: CustomEvent<void>;
}

interface TreeItemCustomComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'selected'
    | 'navigated'
    | 'type'
    | 'accessibleName'
    | 'additionalTextState'
    | 'expanded'
    | 'hasChildren'
    | 'icon'
    | 'indeterminate'
    | 'hideSelectionElement'
    | 'detailClick'
    | 'deleteButton'
    | 'content'
  > {
  effectiveDir: any;
  isUi5Element: any;
  selected: boolean;
  navigated: boolean;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
  accessibleName: string;
  additionalTextState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  expanded: boolean;
  hasChildren: boolean;
  icon: string;
  indeterminate: boolean;
  hideSelectionElement: boolean;

  deleteButton: ButtonComponent['element'];
  content: Array<HTMLElement>;

  addEventListener<K extends keyof TreeItemCustomComponentEventsMap>(
    type: K,
    listener: (
      this: TreeItemCustomComponentElement,
      ev: TreeItemCustomComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TreeItemCustomComponentEventsMap>(
    type: K,
    listener: (
      this: TreeItemCustomComponentElement,
      ev: TreeItemCustomComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  toggle(): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'navigated',
  'type',
  'accessibleName',
  'additionalTextState',
  'expanded',
  'hasChildren',
  'icon',
  'indeterminate',
  'hideSelectionElement',
])
@ProxyOutputs(['detailClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'toggle',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tree-item-custom',
  exportAs: 'ui5TreeItemCustom',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'navigated',
    'type',
    'accessibleName: accessible-name',
    'additionalTextState: additional-text-state',
    'expanded',
    'hasChildren: has-children',
    'icon',
    'indeterminate',
    'hideSelectionElement: hide-selection-element',
  ],
  outputs: ['detailClick: ui5DetailClick'],
})
export class TreeItemCustomComponent {
  selected?: TreeItemCustomComponentElement['selected'];
  navigated?: TreeItemCustomComponentElement['navigated'];
  type?: TreeItemCustomComponentElement['type'];
  accessibleName?: TreeItemCustomComponentElement['accessibleName'];
  additionalTextState?: TreeItemCustomComponentElement['additionalTextState'];
  expanded?: TreeItemCustomComponentElement['expanded'];
  hasChildren?: TreeItemCustomComponentElement['hasChildren'];
  icon?: TreeItemCustomComponentElement['icon'];
  indeterminate?: TreeItemCustomComponentElement['indeterminate'];
  hideSelectionElement?: TreeItemCustomComponentElement['hideSelectionElement'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TreeItemCustomComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get deleteButton(): ButtonComponent['element'] {
    return this.elementRef.nativeElement.deleteButton;
  }
  get content(): Array<HTMLElement> {
    return this.elementRef.nativeElement.content;
  }
}
export declare interface TreeItemCustomComponent
  extends Partial<TreeItemCustomComponentElement> {}
"
`;

exports[`Snapshot test Main Tree Item should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/TreeItem.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';

interface TreeItemComponentEventsMap
  extends Omit<HTMLElementEventMap, 'detailClick'> {
  detailClick: CustomEvent<void>;
}

interface TreeItemComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'selected'
    | 'navigated'
    | 'type'
    | 'accessibleName'
    | 'additionalTextState'
    | 'expanded'
    | 'hasChildren'
    | 'icon'
    | 'indeterminate'
    | 'additionalText'
    | 'text'
    | 'detailClick'
    | 'deleteButton'
  > {
  effectiveDir: any;
  isUi5Element: any;
  selected: boolean;
  navigated: boolean;
  type: 'Active' | 'Detail' | 'Inactive' | 'Navigation';
  accessibleName: string;
  additionalTextState: 'Error' | 'Information' | 'None' | 'Success' | 'Warning';
  expanded: boolean;
  hasChildren: boolean;
  icon: string;
  indeterminate: boolean;
  additionalText: string;
  text: string;

  deleteButton: ButtonComponent['element'];

  addEventListener<K extends keyof TreeItemComponentEventsMap>(
    type: K,
    listener: (
      this: TreeItemComponentElement,
      ev: TreeItemComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TreeItemComponentEventsMap>(
    type: K,
    listener: (
      this: TreeItemComponentElement,
      ev: TreeItemComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  toggle(): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'selected',
  'navigated',
  'type',
  'accessibleName',
  'additionalTextState',
  'expanded',
  'hasChildren',
  'icon',
  'indeterminate',
  'additionalText',
  'text',
])
@ProxyOutputs(['detailClick'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  'toggle',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tree-item',
  exportAs: 'ui5TreeItem',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'selected',
    'navigated',
    'type',
    'accessibleName: accessible-name',
    'additionalTextState: additional-text-state',
    'expanded',
    'hasChildren: has-children',
    'icon',
    'indeterminate',
    'additionalText: additional-text',
    'text',
  ],
  outputs: ['detailClick: ui5DetailClick'],
})
export class TreeItemComponent {
  selected?: TreeItemComponentElement['selected'];
  navigated?: TreeItemComponentElement['navigated'];
  type?: TreeItemComponentElement['type'];
  accessibleName?: TreeItemComponentElement['accessibleName'];
  additionalTextState?: TreeItemComponentElement['additionalTextState'];
  expanded?: TreeItemComponentElement['expanded'];
  hasChildren?: TreeItemComponentElement['hasChildren'];
  icon?: TreeItemComponentElement['icon'];
  indeterminate?: TreeItemComponentElement['indeterminate'];
  additionalText?: TreeItemComponentElement['additionalText'];
  text?: TreeItemComponentElement['text'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TreeItemComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get deleteButton(): ButtonComponent['element'] {
    return this.elementRef.nativeElement.deleteButton;
  }
}
export declare interface TreeItemComponent
  extends Partial<TreeItemComponentElement> {}
"
`;

exports[`Snapshot test Main Tree should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import '@ui5/webcomponents/dist/Tree.js';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';

interface TreeComponentEventsMap
  extends Omit<
    HTMLElementEventMap,
    | 'itemClick'
    | 'itemDelete'
    | 'itemMouseout'
    | 'itemMouseover'
    | 'itemToggle'
    | 'selectionChange'
  > {
  itemClick: CustomEvent<{ item: HTMLElement }>;
  itemDelete: CustomEvent<{ item: HTMLElement }>;
  itemMouseout: CustomEvent<{ item: HTMLElement }>;
  itemMouseover: CustomEvent<{ item: HTMLElement }>;
  itemToggle: CustomEvent<{ item: HTMLElement }>;
  selectionChange: CustomEvent<{
    selectedItems: Array<any>;
    previouslySelectedItems: Array<any>;
    targetItem: HTMLElement;
  }>;
}

interface TreeComponentElement
  extends Omit<
    HTMLElement,
    | 'effectiveDir'
    | 'isUi5Element'
    | 'accessibleName'
    | 'accessibleNameRef'
    | 'footerText'
    | 'headerText'
    | 'mode'
    | 'noDataText'
    | 'itemClick'
    | 'itemDelete'
    | 'itemMouseout'
    | 'itemMouseover'
    | 'itemToggle'
    | 'selectionChange'
    | 'header'
  > {
  effectiveDir: any;
  isUi5Element: any;
  accessibleName: string;
  accessibleNameRef: string;
  footerText: string;
  headerText: string;
  mode:
    | 'Delete'
    | 'MultiSelect'
    | 'None'
    | 'SingleSelect'
    | 'SingleSelectAuto'
    | 'SingleSelectBegin'
    | 'SingleSelectEnd';
  noDataText: string;

  header: Array<HTMLElement>;

  addEventListener<K extends keyof TreeComponentEventsMap>(
    type: K,
    listener: (
      this: TreeComponentElement,
      ev: TreeComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof TreeComponentEventsMap>(
    type: K,
    listener: (
      this: TreeComponentElement,
      ev: TreeComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;

  _render(): any;

  attachInvalidate(callback: any): any;

  define(): any;

  detachInvalidate(callback: any): any;

  fireEvent(name: any, data: any, cancelable: any, bubbles: any): boolean;

  focus(): any;

  getDomRef(): any;

  getFocusDomRef(): any;

  getFocusDomRefAsync(): any;

  getMetadata(): any;

  getSlottedNodes(): any;

  getStaticAreaItemDomRef(): any;

  getUniqueDependencies(): any;

  onAfterRendering(): any;

  onBeforeRendering(): any;

  onDefine(): any;

  onEnterDOM(): any;

  onExitDOM(): any;

  onInvalidation(changeInfo: any): any;

  _getListItemForTreeItem(item: any): any;

  focusItemByIndex(index: any): any;

  getItems(): Array<any>;

  walk(callback: any): any;
}

// JS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'accessibleName',
  'accessibleNameRef',
  'footerText',
  'headerText',
  'mode',
  'noDataText',
])
@ProxyOutputs([
  'itemClick',
  'itemDelete',
  'itemMouseout',
  'itemMouseover',
  'itemToggle',
  'selectionChange',
])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  '_getListItemForTreeItem',
  'focusItemByIndex',
  'getItems',
  'walk',
])
@Component({
  template: \`<ng-content></ng-content>\`,
  selector: 'ui5-tree',
  exportAs: 'ui5Tree',
  standalone: true,
  providers: [],
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'accessibleName: accessible-name',
    'accessibleNameRef: accessible-name-ref',
    'footerText: footer-text',
    'headerText: header-text',
    'mode',
    'noDataText: no-data-text',
  ],
  outputs: [
    'itemClick: ui5ItemClick',
    'itemDelete: ui5ItemDelete',
    'itemMouseout: ui5ItemMouseout',
    'itemMouseover: ui5ItemMouseover',
    'itemToggle: ui5ItemToggle',
    'selectionChange: ui5SelectionChange',
  ],
})
export class TreeComponent {
  accessibleName?: TreeComponentElement['accessibleName'];
  accessibleNameRef?: TreeComponentElement['accessibleNameRef'];
  footerText?: TreeComponentElement['footerText'];
  headerText?: TreeComponentElement['headerText'];
  mode?: TreeComponentElement['mode'];
  noDataText?: TreeComponentElement['noDataText'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<TreeComponentElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): typeof this.elementRef.nativeElement {
    return this.elementRef.nativeElement;
  }

  get header(): Array<HTMLElement> {
    return this.elementRef.nativeElement.header;
  }
}
export declare interface TreeComponent extends Partial<TreeComponentElement> {}
"
`;

exports[`Snapshot test Main Ui 5 Main Module Ts should match the snapshot 1`] = `
"import { NgModule } from '@angular/core';
import { Ui5WebcomponentsMainThemingService } from '@ui5/webcomponents-ngx/main/theming';
import '@ui5/webcomponents/dist/Assets.js';
import { AvatarComponent } from '@ui5/webcomponents-ngx/main/avatar';
import { AvatarGroupComponent } from '@ui5/webcomponents-ngx/main/avatar-group';
import { BadgeComponent } from '@ui5/webcomponents-ngx/main/badge';
import { BreadcrumbsComponent } from '@ui5/webcomponents-ngx/main/breadcrumbs';
import { BreadcrumbsItemComponent } from '@ui5/webcomponents-ngx/main/breadcrumbs-item';
import { BusyIndicatorComponent } from '@ui5/webcomponents-ngx/main/busy-indicator';
import { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';
import { CalendarComponent } from '@ui5/webcomponents-ngx/main/calendar';
import { CalendarDateComponent } from '@ui5/webcomponents-ngx/main/calendar-date';
import { CardComponent } from '@ui5/webcomponents-ngx/main/card';
import { CardHeaderComponent } from '@ui5/webcomponents-ngx/main/card-header';
import { CarouselComponent } from '@ui5/webcomponents-ngx/main/carousel';
import { CheckBoxComponent } from '@ui5/webcomponents-ngx/main/check-box';
import { ColorPaletteComponent } from '@ui5/webcomponents-ngx/main/color-palette';
import { ColorPaletteItemComponent } from '@ui5/webcomponents-ngx/main/color-palette-item';
import { ColorPalettePopoverComponent } from '@ui5/webcomponents-ngx/main/color-palette-popover';
import { ColorPickerComponent } from '@ui5/webcomponents-ngx/main/color-picker';
import { ComboBoxComponent } from '@ui5/webcomponents-ngx/main/combo-box';
import { ComboBoxGroupItemComponent } from '@ui5/webcomponents-ngx/main/combo-box-group-item';
import { ComboBoxItemComponent } from '@ui5/webcomponents-ngx/main/combo-box-item';
import { CustomListItemComponent } from '@ui5/webcomponents-ngx/main/custom-list-item';
import { DatePickerComponent } from '@ui5/webcomponents-ngx/main/date-picker';
import { DateRangePickerComponent } from '@ui5/webcomponents-ngx/main/date-range-picker';
import { DateTimePickerComponent } from '@ui5/webcomponents-ngx/main/date-time-picker';
import { DayPickerComponent } from '@ui5/webcomponents-ngx/main/day-picker';
import { DialogComponent } from '@ui5/webcomponents-ngx/main/dialog';
import { FileUploaderComponent } from '@ui5/webcomponents-ngx/main/file-uploader';
import { GroupHeaderListItemComponent } from '@ui5/webcomponents-ngx/main/group-header-list-item';
import { IconComponent } from '@ui5/webcomponents-ngx/main/icon';
import { InputComponent } from '@ui5/webcomponents-ngx/main/input';
import { LabelComponent } from '@ui5/webcomponents-ngx/main/label';
import { LinkComponent } from '@ui5/webcomponents-ngx/main/link';
import { ListComponent } from '@ui5/webcomponents-ngx/main/list';
import { MenuComponent } from '@ui5/webcomponents-ngx/main/menu';
import { MenuItemComponent } from '@ui5/webcomponents-ngx/main/menu-item';
import { MessageStripComponent } from '@ui5/webcomponents-ngx/main/message-strip';
import { MonthPickerComponent } from '@ui5/webcomponents-ngx/main/month-picker';
import { MultiComboBoxComponent } from '@ui5/webcomponents-ngx/main/multi-combo-box';
import { MultiComboBoxGroupItemComponent } from '@ui5/webcomponents-ngx/main/multi-combo-box-group-item';
import { MultiComboBoxItemComponent } from '@ui5/webcomponents-ngx/main/multi-combo-box-item';
import { MultiInputComponent } from '@ui5/webcomponents-ngx/main/multi-input';
import { OptionComponent } from '@ui5/webcomponents-ngx/main/option';
import { PanelComponent } from '@ui5/webcomponents-ngx/main/panel';
import { PopoverComponent } from '@ui5/webcomponents-ngx/main/popover';
import { ProgressIndicatorComponent } from '@ui5/webcomponents-ngx/main/progress-indicator';
import { RadioButtonComponent } from '@ui5/webcomponents-ngx/main/radio-button';
import { RangeSliderComponent } from '@ui5/webcomponents-ngx/main/range-slider';
import { RatingIndicatorComponent } from '@ui5/webcomponents-ngx/main/rating-indicator';
import { ResponsivePopoverComponent } from '@ui5/webcomponents-ngx/main/responsive-popover';
import { SegmentedButtonComponent } from '@ui5/webcomponents-ngx/main/segmented-button';
import { SegmentedButtonItemComponent } from '@ui5/webcomponents-ngx/main/segmented-button-item';
import { SelectComponent } from '@ui5/webcomponents-ngx/main/select';
import { SliderComponent } from '@ui5/webcomponents-ngx/main/slider';
import { SliderBaseComponent } from '@ui5/webcomponents-ngx/main/slider-base';
import { SplitButtonComponent } from '@ui5/webcomponents-ngx/main/split-button';
import { StandardListItemComponent } from '@ui5/webcomponents-ngx/main/standard-list-item';
import { StepInputComponent } from '@ui5/webcomponents-ngx/main/step-input';
import { SuggestionGroupItemComponent } from '@ui5/webcomponents-ngx/main/suggestion-group-item';
import { SuggestionItemComponent } from '@ui5/webcomponents-ngx/main/suggestion-item';
import { SwitchComponent } from '@ui5/webcomponents-ngx/main/switch';
import { TabComponent } from '@ui5/webcomponents-ngx/main/tab';
import { TabContainerComponent } from '@ui5/webcomponents-ngx/main/tab-container';
import { TableComponent } from '@ui5/webcomponents-ngx/main/table';
import { TableCellComponent } from '@ui5/webcomponents-ngx/main/table-cell';
import { TableColumnComponent } from '@ui5/webcomponents-ngx/main/table-column';
import { TableGroupRowComponent } from '@ui5/webcomponents-ngx/main/table-group-row';
import { TableRowComponent } from '@ui5/webcomponents-ngx/main/table-row';
import { TabSeparatorComponent } from '@ui5/webcomponents-ngx/main/tab-separator';
import { TextAreaComponent } from '@ui5/webcomponents-ngx/main/text-area';
import { TimePickerComponent } from '@ui5/webcomponents-ngx/main/time-picker';
import { TitleComponent } from '@ui5/webcomponents-ngx/main/title';
import { ToastComponent } from '@ui5/webcomponents-ngx/main/toast';
import { ToggleButtonComponent } from '@ui5/webcomponents-ngx/main/toggle-button';
import { TokenComponent } from '@ui5/webcomponents-ngx/main/token';
import { TreeComponent } from '@ui5/webcomponents-ngx/main/tree';
import { TreeItemComponent } from '@ui5/webcomponents-ngx/main/tree-item';
import { TreeItemCustomComponent } from '@ui5/webcomponents-ngx/main/tree-item-custom';
import { WheelSliderComponent } from '@ui5/webcomponents-ngx/main/wheel-slider';
import { YearPickerComponent } from '@ui5/webcomponents-ngx/main/year-picker';

const imports = [
  AvatarComponent,
  AvatarGroupComponent,
  BadgeComponent,
  BreadcrumbsComponent,
  BreadcrumbsItemComponent,
  BusyIndicatorComponent,
  ButtonComponent,
  CalendarComponent,
  CalendarDateComponent,
  CardComponent,
  CardHeaderComponent,
  CarouselComponent,
  CheckBoxComponent,
  ColorPaletteComponent,
  ColorPaletteItemComponent,
  ColorPalettePopoverComponent,
  ColorPickerComponent,
  ComboBoxComponent,
  ComboBoxGroupItemComponent,
  ComboBoxItemComponent,
  CustomListItemComponent,
  DatePickerComponent,
  DateRangePickerComponent,
  DateTimePickerComponent,
  DayPickerComponent,
  DialogComponent,
  FileUploaderComponent,
  GroupHeaderListItemComponent,
  IconComponent,
  InputComponent,
  LabelComponent,
  LinkComponent,
  ListComponent,
  MenuComponent,
  MenuItemComponent,
  MessageStripComponent,
  MonthPickerComponent,
  MultiComboBoxComponent,
  MultiComboBoxGroupItemComponent,
  MultiComboBoxItemComponent,
  MultiInputComponent,
  OptionComponent,
  PanelComponent,
  PopoverComponent,
  ProgressIndicatorComponent,
  RadioButtonComponent,
  RangeSliderComponent,
  RatingIndicatorComponent,
  ResponsivePopoverComponent,
  SegmentedButtonComponent,
  SegmentedButtonItemComponent,
  SelectComponent,
  SliderComponent,
  SliderBaseComponent,
  SplitButtonComponent,
  StandardListItemComponent,
  StepInputComponent,
  SuggestionGroupItemComponent,
  SuggestionItemComponent,
  SwitchComponent,
  TabComponent,
  TabContainerComponent,
  TableComponent,
  TableCellComponent,
  TableColumnComponent,
  TableGroupRowComponent,
  TableRowComponent,
  TabSeparatorComponent,
  TextAreaComponent,
  TimePickerComponent,
  TitleComponent,
  ToastComponent,
  ToggleButtonComponent,
  TokenComponent,
  TreeComponent,
  TreeItemComponent,
  TreeItemCustomComponent,
  WheelSliderComponent,
  YearPickerComponent,
];
const exports = [...imports];

@NgModule({
  imports: [...imports],
  exports: [...exports],
})
class Ui5MainModule {
  constructor(
    ui5WebcomponentsMainThemingService: Ui5WebcomponentsMainThemingService
  ) {}
}
export { Ui5MainModule };
"
`;

exports[`Snapshot test Main Wheel Slider should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/WheelSlider.js';
import type WheelSlider from '@ui5/webcomponents/dist/WheelSlider.js';

export declare interface WheelSliderElement
  extends Partial<
    Omit<WheelSlider, 'cyclic' | 'disabled' | 'expanded' | 'label' | 'value'>
  > {
  cyclic: boolean;
  disabled: boolean;
  expanded: boolean;
  label: string;
  value: string;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'cyclic',
  'disabled',
  'expanded',
  'label',
  'value',
])
@ProxyOutputs([])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
])
@Component({
  selector: 'ui5-wheelslider',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5WheelSlider',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'cyclic',
    'disabled',
    'expanded',
    'label',
    'value',
  ],
  outputs: [],
  providers: [],
})
export class WheelSliderComponent {
  cyclic?: WheelSliderElement['cyclic'];
  disabled?: WheelSliderElement['disabled'];
  expanded?: WheelSliderElement['expanded'];
  label?: WheelSliderElement['label'];
  value?: WheelSliderElement['value'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<WheelSliderElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): WheelSliderElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface WheelSliderComponent
  extends Partial<WheelSliderElement> {}
"
`;

exports[`Snapshot test Main Year Picker should match the snapshot 1`] = `
"import {
  Component,
  ElementRef,
  NgZone,
  ChangeDetectorRef,
  EventEmitter,
} from '@angular/core';
import {
  ProxyInputs,
  ProxyMethods,
  ProxyOutputs,
} from '@ui5/webcomponents-ngx/utils';
import '@ui5/webcomponents/dist/YearPicker.js';
import type YearPicker from '@ui5/webcomponents/dist/YearPicker.js';

interface YearPickerComponentEventsMap
  extends Omit<HTMLElementEventMap, 'change' | 'navigate'> {
  change: CustomEvent<void>;
  navigate: CustomEvent<void>;
}

export declare interface YearPickerElement
  extends Partial<
    Omit<
      YearPicker,
      | 'change'
      | 'navigate'
      | 'formatPattern'
      | 'maxDate'
      | 'minDate'
      | 'primaryCalendarType'
      | 'secondaryCalendarType'
    >
  > {
  formatPattern: string;
  maxDate: string;
  minDate: string;
  primaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';
  secondaryCalendarType:
    | 'Buddhist'
    | 'Gregorian'
    | 'Islamic'
    | 'Japanese'
    | 'Persian';

  addEventListener<K extends keyof YearPickerComponentEventsMap>(
    type: K,
    listener: (
      this: YearPickerElement,
      ev: YearPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | AddEventListenerOptions
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): void;
  removeEventListener<K extends keyof YearPickerComponentEventsMap>(
    type: K,
    listener: (
      this: YearPickerElement,
      ev: YearPickerComponentEventsMap[K]
    ) => any,
    options?: boolean | EventListenerOptions
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions
  ): void;
}

// TS source file
@ProxyInputs([
  'effectiveDir',
  'isUi5Element',
  'formatPattern',
  'maxDate',
  'minDate',
  'primaryCalendarType',
  'secondaryCalendarType',
  'selectedDates',
])
@ProxyOutputs(['change', 'navigate'])
@ProxyMethods([
  '_render',
  'attachInvalidate',
  'define',
  'detachInvalidate',
  'fireEvent',
  'focus',
  'getDomRef',
  'getFocusDomRef',
  'getFocusDomRefAsync',
  'getMetadata',
  'getSlottedNodes',
  'getStaticAreaItemDomRef',
  'getUniqueDependencies',
  'onAfterRendering',
  'onBeforeRendering',
  'onDefine',
  'onEnterDOM',
  'onExitDOM',
  'onInvalidation',
  '_safelyModifyTimestampBy',
  '_safelySetTimestamp',
])
@Component({
  selector: 'ui5-yearpicker',
  template: \`<ng-content></ng-content>\`,
  exportAs: 'ui5YearPicker',
  standalone: true,
  inputs: [
    'effectiveDir: effective-dir',
    'isUi5Element: is-ui-5-element',
    'formatPattern: format-pattern',
    'maxDate: max-date',
    'minDate: min-date',
    'primaryCalendarType: primary-calendar-type',
    'secondaryCalendarType: secondary-calendar-type',
    'selectedDates: selected-dates',
  ],
  outputs: ['change: ui5Change', 'navigate: ui5Navigate'],
  providers: [],
})
export class YearPickerComponent {
  formatPattern?: YearPickerElement['formatPattern'];
  maxDate?: YearPickerElement['maxDate'];
  minDate?: YearPickerElement['minDate'];
  primaryCalendarType?: YearPickerElement['primaryCalendarType'];
  secondaryCalendarType?: YearPickerElement['secondaryCalendarType'];
  constructor(
    private c: ChangeDetectorRef,
    private elementRef: ElementRef<YearPickerElement>,
    private zone: NgZone
  ) {
    c.detach();
  }

  get element(): YearPickerElement {
    return this.elementRef.nativeElement;
  }
}

export declare interface YearPickerComponent
  extends Partial<YearPickerElement> {
  change: EventEmitter<YearPickerComponentEventsMap['change']>;
  navigate: EventEmitter<YearPickerComponentEventsMap['navigate']>;
}
"
`;
